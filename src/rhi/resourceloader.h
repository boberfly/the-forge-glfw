///////////////////////////////////////////////////////////////////////////
//
//  Autogenerated by bindgen.py
//
///////////////////////////////////////////////////////////////////////////


#pragma once
#ifndef RHI_RESOURCELOADER_H_
#define RHI_RESOURCELOADER_H_


#include "export.h"
#include "enums.h"
#include "resourceloader_enums.h"
#include "structs.h"
#include "resourceloader_structs.h"
        

#if defined(__cplusplus)
extern "C" {
#endif


#if !defined(RHI_SKIP_DECLARATIONS)

RHI_API void RHI_initResourceLoaderInterface(RHI_RendererHandle pRenderer, RHI_ResourceLoaderDesc * pDesc);
RHI_API void RHI_exitResourceLoaderInterface(RHI_RendererHandle pRenderer);
RHI_API void RHI_addBufferResource(RHI_BufferLoadDesc * pBufferDesc, RHI_SyncToken * token);
RHI_API void RHI_addTextureResource(RHI_TextureLoadDesc * pTextureDesc, RHI_SyncToken * token);
RHI_API void RHI_addGeomResource(RHI_GeometryLoadDesc * pGeomDesc, RHI_SyncToken * token);
RHI_API void RHI_beginUpdateBufferResource(RHI_BufferUpdateDesc * pBufferDesc);
RHI_API void RHI_beginUpdateTextureResource(RHI_TextureUpdateDesc * pTextureDesc);
RHI_API void RHI_endUpdateBufferResource(RHI_BufferUpdateDesc * pBuffer, RHI_SyncToken * token);
RHI_API void RHI_endUpdateTextureResource(RHI_TextureUpdateDesc * pTexture, RHI_SyncToken * token);
RHI_API void RHI_removeBufferResource(RHI_BufferHandle pBuffer);
RHI_API void RHI_removeTextureResource(RHI_TextureHandle pTexture);
RHI_API void RHI_removeGeomResource(RHI_Geometry * pGeom);
RHI_API bool RHI_allResourceLoadsCompleted();
RHI_API void RHI_waitForAllResourceLoads();
RHI_API RHI_SyncToken RHI_getLastTokenCompleted();
RHI_API bool RHI_isTokenCompleted(const RHI_SyncToken * token);
RHI_API void RHI_waitForToken(const RHI_SyncToken * token);
RHI_API void RHI_loadShader(RHI_RendererHandle pRenderer, const RHI_ShaderLoadDesc * pDesc, RHI_ShaderHandle * pShader);
RHI_API void RHI_loadPipelineCache(RHI_RendererHandle pRenderer, const RHI_PipelineCacheLoadDesc * pDesc, RHI_PipelineCacheHandle * ppPipelineCache);
RHI_API void RHI_savePipelineCache(RHI_RendererHandle pRenderer, RHI_PipelineCacheHandle pPipelineCache, RHI_PipelineCacheSaveDesc * pDesc);


#endif // !defined(RHI_SKIP_DECLARATIONS)

#if defined(__cplusplus)
} // extern "C"
#endif

#endif // RHI_RESOURCELOADER_H_

