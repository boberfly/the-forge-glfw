///////////////////////////////////////////////////////////////////////////
//
//  Autogenerated by bindgen.py
//
///////////////////////////////////////////////////////////////////////////

#include "../rhi.h"
#include "../resourceloader.h"
#include "../ray.h"

#if !defined(RHI_SKIP_DECLARATIONS)


#include <string.h>
#include <OS/Interfaces/IOperatingSystem.h>
#include <ThirdParty/OpenSource/tinyimageformat/tinyimageformat_base.h>
#include <Renderer/IRenderer.h>
#include <Renderer/IResourceLoader.h>
#include <Renderer/IRay.h>
    

struct SubresourceDataDesc
{
	uint64_t                           mSrcOffset;
	uint32_t                           mMipLevel;
	uint32_t                           mArrayLayer;
#if defined(DIRECT3D11) || defined(METAL) || defined(VULKAN)
	uint32_t                           mRowPitch;
	uint32_t                           mSlicePitch;
#endif
};

static void API_CHECK();

extern void addBuffer(Renderer *pRenderer, const BufferDesc *desc, Buffer **pp_buffer);
extern void removeBuffer(Renderer *pRenderer, Buffer *p_buffer);
extern void addTexture(Renderer *pRenderer, const TextureDesc *pDesc, Texture **pp_texture);
extern void removeTexture(Renderer *pRenderer, Texture *p_texture);
extern void mapBuffer(Renderer *pRenderer, Buffer *pBuffer, ReadRange *pRange);
extern void unmapBuffer(Renderer *pRenderer, Buffer *pBuffer);
extern void cmdUpdateBuffer(Cmd *pCmd, Buffer *pBuffer, uint64_t dstOffset, Buffer *pSrcBuffer, uint64_t srcOffset, uint64_t size);
extern void cmdUpdateSubresource(Cmd *pCmd, Texture *pTexture, Buffer *pSrcBuffer, const SubresourceDataDesc *pSubresourceDesc);

RHI_Result RHI_init(RHI_RendererApi renderer)
{
    API_CHECK(); // windows static_assert(offsetof) is broken so do it at runtime there
    return RHI_RESULT_SUCCESS;
}

void RHI_exit(void)
{
    return;
}

#ifdef RHI_GLFW
void RHI_setWindowHandleGLFW(const GLFWwindow * window, RHI_WindowHandle windowHandle)
{
    if(!window)
        return;
#ifdef _WIN32
    windowHandle.window = (void *)glfwGetWin32Window(window);
#else
    windowHandle.window = (void *)(uintptr_t)glfwGetX11Window(window);
    windowHandle.display = glfwGetX11Display();
#endif
}
#endif // RHI_GLFW

#ifdef RHI_SDL
void RHI_setWindowHandleSDL(const SDL_Window * window, RHI_WindowHandle windowHandle)
{
    if(!window)
        return;

    SDL_SysWMinfo sysInfo;

    SDL_VERSION(&sysInfo.version);
    SDL_GetWindowWMInfo(window, &sysInfo);
#ifdef _WIN32
    windowHandle.window = (void *)sysInfo.info.win.window;
#elif __ANDROID__
    windowHandle.window = (void *)sysInfo.info.android.window;
    windowHandle.activity = SDL_AndroidGetActivity();
#else
    windowHandle.window = (void *)(uintptr_t)sysInfo.info.x11.window;
    windowHandle.display = sysInfo.info.x11.display;
#endif
}
#endif // RHI_SDL

static ShaderStage __shaderStageFlagsToShaderStage(uint32_t flags) {
    uint32_t stage = SHADER_STAGE_NONE;
#if defined(METAL)
    if (flags & RHI_SHADER_STAGE_VERT) {
        stage |= SHADER_STAGE_VERT;
    }
    if (flags & RHI_SHADER_STAGE_FRAG) {
        stage |= SHADER_STAGE_FRAG;
    }
    if (flags & RHI_SHADER_STAGE_COMP) {
        stage |= SHADER_STAGE_COMP;
    }
#else
    if(flags & RHI_SHADER_STAGE_VERT) stage |= SHADER_STAGE_VERT;
    if(flags & RHI_SHADER_STAGE_FRAG) stage |= SHADER_STAGE_FRAG;
    if(flags & RHI_SHADER_STAGE_COMP) stage |= SHADER_STAGE_COMP;
    if(flags & RHI_SHADER_STAGE_TESC) stage |= SHADER_STAGE_TESC;
    if(flags & RHI_SHADER_STAGE_TESE) stage |= SHADER_STAGE_TESE;
    if(flags & RHI_SHADER_STAGE_GEOM) stage |= SHADER_STAGE_GEOM;
    if(flags & RHI_SHADER_STAGE_RAYTRACING) stage |= SHADER_STAGE_RAYTRACING;
#endif
    return (ShaderStage) stage;
}

#ifdef METAL
static void __shaderStageToShaderStage(RHI_ShaderStageDesc const *src, ShaderStageDesc *dst) {
	dst->pName = src->pName;
	dst->pCode = src->pCode;
	dst->pEntryPoint = src->pEntryPoint;
}
#endif

static void __binaryShaderStageToBinaryShaderStage(RHI_BinaryShaderStageDesc const *src, BinaryShaderStageDesc *dst) {
    dst->pByteCode = src->pByteCode;
    dst->mByteCodeSize = src->mByteCodeSize;
    dst->pEntryPoint = src->pEntryPoint;
#ifdef METAL
    dst->pSource = src->source;
#endif
}

RHI_API void RHI_initRenderer(const char * app_name, const RHI_RendererDesc * p_settings, RHI_RendererHandle * pRenderer) {
    initRenderer((const char *)app_name, (const RendererDesc *)p_settings, (Renderer **)pRenderer);
}

RHI_API void RHI_removeRenderer(RHI_RendererHandle pRenderer) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeRenderer((Renderer *)pRenderer);
}

RHI_API void RHI_addFence(RHI_RendererHandle pRenderer, RHI_FenceHandle * p_fence) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addFence((Renderer *)pRenderer, (Fence **)p_fence);
}

RHI_API void RHI_removeFence(RHI_RendererHandle pRenderer, RHI_FenceHandle p_fence) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeFence((Renderer *)pRenderer, (Fence *)p_fence);
}

RHI_API void RHI_addSemaphore(RHI_RendererHandle pRenderer, RHI_SemaphoreHandle * p_semaphore) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addSemaphore((Renderer *)pRenderer, (Semaphore **)p_semaphore);
}

RHI_API void RHI_removeSemaphore(RHI_RendererHandle pRenderer, RHI_SemaphoreHandle p_semaphore) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeSemaphore((Renderer *)pRenderer, (Semaphore *)p_semaphore);
}

RHI_API void RHI_addQueue(RHI_RendererHandle pRenderer, RHI_QueueDesc * pQDesc, RHI_QueueHandle * pQueue) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addQueue((Renderer *)pRenderer, (QueueDesc *)pQDesc, (Queue **)pQueue);
}

RHI_API void RHI_removeQueue(RHI_RendererHandle pRenderer, RHI_QueueHandle pQueue) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeQueue((Renderer *)pRenderer, (Queue *)pQueue);
}

RHI_API void RHI_addSwapChain(RHI_RendererHandle pRenderer, const RHI_SwapChainDesc * p_desc, RHI_SwapChainHandle * p_swap_chain) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    
    WindowHandle windowHandle{};
#if defined(VK_USE_PLATFORM_XLIB_KHR)
    windowHandle.display = (Display*)p_desc->mWindowHandle.display;
    windowHandle.window = (Window)p_desc->mWindowHandle.window;
#elif defined(VK_USE_PLATFORM_XCB_KHR)
	xcb_connection_t*        connection;
	xcb_window_t             window;
	xcb_screen_t*            screen;
	xcb_intern_atom_reply_t* atom_wm_delete_window;
#elif defined(VK_USE_PLATFORM_ANDROID_KHR)
    windowHandle.window = (ANativeWindow*)p_desc->mWindowHandle.window;
    windowHandle.activity = (ANativeActivity*)p_desc->mWindowHandle.activity;
#else
    windowHandle.window = p_desc->mWindowHandle.window;
#endif
    SwapChainDesc desc{};
    desc.mWindowHandle = windowHandle;
    desc.ppPresentQueues = (Queue **)p_desc->ppPresentQueues;
    desc.mPresentQueueCount = p_desc->mPresentQueueCount;
    desc.mImageCount = p_desc->mImageCount;
    desc.mWidth = p_desc->mWidth;
    desc.mHeight = p_desc->mHeight;
    desc.mColorFormat = (TinyImageFormat)p_desc->mColorFormat;
    ClearValue cv;
    memcpy(&desc.mColorClearValue, &p_desc->mColorClearValue, sizeof(ClearValue));
    desc.mEnableVsync = p_desc->mEnableVsync;
    desc.mUseFlipSwapEffect = p_desc->mUseFlipSwapEffect;
    addSwapChain((Renderer *)pRenderer, &desc, (SwapChain **)p_swap_chain);
}

RHI_API void RHI_removeSwapChain(RHI_RendererHandle pRenderer, RHI_SwapChainHandle p_swap_chain) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeSwapChain((Renderer *)pRenderer, (SwapChain *)p_swap_chain);
}

RHI_API void RHI_addCmdPool(RHI_RendererHandle pRenderer, const RHI_CmdPoolDesc * p_desc, RHI_CmdPoolHandle * p_cmd_pool) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addCmdPool((Renderer *)pRenderer, (const CmdPoolDesc *)p_desc, (CmdPool **)p_cmd_pool);
}

RHI_API void RHI_removeCmdPool(RHI_RendererHandle pRenderer, RHI_CmdPoolHandle p_CmdPool) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeCmdPool((Renderer *)pRenderer, (CmdPool *)p_CmdPool);
}

RHI_API void RHI_addCmd(RHI_RendererHandle pRenderer, const RHI_CmdDesc * p_desc, RHI_CmdHandle * p_cmd) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addCmd((Renderer *)pRenderer, (const CmdDesc *)p_desc, (Cmd **)p_cmd);
}

RHI_API void RHI_removeCmd(RHI_RendererHandle pRenderer, RHI_CmdHandle pCmd) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeCmd((Renderer *)pRenderer, (Cmd *)pCmd);
}

RHI_API void RHI_addCmd_n(RHI_RendererHandle pRenderer, const RHI_CmdDesc * p_desc, uint32_t cmd_count, RHI_CmdHandle ** p_cmds) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addCmd_n((Renderer *)pRenderer, (const CmdDesc *)p_desc, (uint32_t)cmd_count, (Cmd ***)p_cmds);
}

RHI_API void RHI_removeCmd_n(RHI_RendererHandle pRenderer, uint32_t cmd_count, RHI_CmdHandle * p_cmds) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeCmd_n((Renderer *)pRenderer, (uint32_t)cmd_count, (Cmd **)p_cmds);
}

RHI_API void RHI_addRenderTarget(RHI_RendererHandle pRenderer, const RHI_RenderTargetDesc * pDesc, RHI_RenderTargetHandle * ppRenderTarget) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addRenderTarget((Renderer *)pRenderer, (const RenderTargetDesc *)pDesc, (RenderTarget **)ppRenderTarget);
}

RHI_API void RHI_removeRenderTarget(RHI_RendererHandle pRenderer, RHI_RenderTargetHandle pRenderTarget) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeRenderTarget((Renderer *)pRenderer, (RenderTarget *)pRenderTarget);
}

RHI_API void RHI_addSampler(RHI_RendererHandle pRenderer, const RHI_SamplerDesc * pDesc, RHI_SamplerHandle * p_sampler) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addSampler((Renderer *)pRenderer, (const SamplerDesc *)pDesc, (Sampler **)p_sampler);
}

RHI_API void RHI_removeSampler(RHI_RendererHandle pRenderer, RHI_SamplerHandle p_sampler) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeSampler((Renderer *)pRenderer, (Sampler *)p_sampler);
}

RHI_API void RHI_addShaderBinary(RHI_RendererHandle pRenderer, const RHI_BinaryShaderDesc * p_desc, RHI_ShaderHandle * p_shader_program) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    
    BinaryShaderDesc desc{};
    desc.mStages = __shaderStageFlagsToShaderStage(p_desc->mStages);
    if (desc.mStages & SHADER_STAGE_VERT) {
        __binaryShaderStageToBinaryShaderStage(&p_desc->mVert, &desc.mVert);
    }
    if (desc.mStages & SHADER_STAGE_FRAG) {
        __binaryShaderStageToBinaryShaderStage(&p_desc->mFrag, &desc.mFrag);
    }
#ifndef METAL
    if(desc.mStages & SHADER_STAGE_GEOM)
        __binaryShaderStageToBinaryShaderStage(&p_desc->mGeom, &desc.mGeom);
    if(desc.mStages & SHADER_STAGE_HULL)
        __binaryShaderStageToBinaryShaderStage(&p_desc->mHull, &desc.mHull);
    if(desc.mStages & SHADER_STAGE_DOMN)
        __binaryShaderStageToBinaryShaderStage(&p_desc->mDomain, &desc.mDomain);
#endif
    if (desc.mStages & SHADER_STAGE_COMP) {
        __binaryShaderStageToBinaryShaderStage(&p_desc->mComp, &desc.mComp);
    }
    addShaderBinary((Renderer *)pRenderer, &desc, (Shader **)p_shader_program);
}

RHI_API void RHI_removeShader(RHI_RendererHandle pRenderer, RHI_ShaderHandle p_shader_program) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeShader((Renderer *)pRenderer, (Shader *)p_shader_program);
}

RHI_API void RHI_addRootSignature(RHI_RendererHandle pRenderer, const RHI_RootSignatureDesc * pDesc, RHI_RootSignatureHandle * pRootSignature) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addRootSignature((Renderer *)pRenderer, (const RootSignatureDesc *)pDesc, (RootSignature **)pRootSignature);
}

RHI_API void RHI_removeRootSignature(RHI_RendererHandle pRenderer, RHI_RootSignatureHandle pRootSignature) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeRootSignature((Renderer *)pRenderer, (RootSignature *)pRootSignature);
}

RHI_API void RHI_addPipeline(RHI_RendererHandle pRenderer, const RHI_PipelineDesc * p_pipeline_settings, RHI_PipelineHandle * p_pipeline) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addPipeline((Renderer *)pRenderer, (const PipelineDesc *)p_pipeline_settings, (Pipeline **)p_pipeline);
}

RHI_API void RHI_removePipeline(RHI_RendererHandle pRenderer, RHI_PipelineHandle p_pipeline) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removePipeline((Renderer *)pRenderer, (Pipeline *)p_pipeline);
}

RHI_API void RHI_addPipelineCache(RHI_RendererHandle pRenderer, const RHI_PipelineCacheDesc * pDesc, RHI_PipelineCacheHandle * ppPipelineCache) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addPipelineCache((Renderer *)pRenderer, (const PipelineCacheDesc *)pDesc, (PipelineCache **)ppPipelineCache);
}

RHI_API void RHI_getPipelineCacheData(RHI_RendererHandle pRenderer, RHI_PipelineCacheHandle pPipelineCache, size_t * pSize, void * pData) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    getPipelineCacheData((Renderer *)pRenderer, (PipelineCache *)pPipelineCache, (size_t *)pSize, (void *)pData);
}

RHI_API void RHI_removePipelineCache(RHI_RendererHandle pRenderer, RHI_PipelineCacheHandle pPipelineCache) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removePipelineCache((Renderer *)pRenderer, (PipelineCache *)pPipelineCache);
}

RHI_API void RHI_addDescriptorSet(RHI_RendererHandle pRenderer, const RHI_DescriptorSetDesc * pDesc, RHI_DescriptorSetHandle * pDescriptorSet) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addDescriptorSet((Renderer *)pRenderer, (const DescriptorSetDesc *)pDesc, (DescriptorSet **)pDescriptorSet);
}

RHI_API void RHI_removeDescriptorSet(RHI_RendererHandle pRenderer, RHI_DescriptorSetHandle pDescriptorSet) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeDescriptorSet((Renderer *)pRenderer, (DescriptorSet *)pDescriptorSet);
}

RHI_API void RHI_updateDescriptorSet(RHI_RendererHandle pRenderer, uint32_t index, RHI_DescriptorSetHandle pDescriptorSet, uint32_t count, const RHI_DescriptorData * pParams) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    updateDescriptorSet((Renderer *)pRenderer, (uint32_t)index, (DescriptorSet *)pDescriptorSet, (uint32_t)count, (const DescriptorData *)pParams);
}

RHI_API void RHI_resetCmdPool(RHI_RendererHandle pRenderer, RHI_CmdPoolHandle pCmdPool) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    resetCmdPool((Renderer *)pRenderer, (CmdPool *)pCmdPool);
}

RHI_API void RHI_beginCmd(RHI_CmdHandle p_cmd) {
    beginCmd((Cmd *)p_cmd);
}

RHI_API void RHI_endCmd(RHI_CmdHandle p_cmd) {
    endCmd((Cmd *)p_cmd);
}

RHI_API void RHI_cmdBindRenderTargets(RHI_CmdHandle p_cmd, uint32_t render_target_count, RHI_RenderTargetHandle * p_render_targets, RHI_RenderTargetHandle p_depth_stencil, const RHI_LoadActionsDesc * loadActions, uint32_t * pColorArraySlices, uint32_t * pColorMipSlices, uint32_t depthArraySlice, uint32_t depthMipSlice) {
    cmdBindRenderTargets((Cmd *)p_cmd, (uint32_t)render_target_count, (RenderTarget **)p_render_targets, (RenderTarget *)p_depth_stencil, (const LoadActionsDesc *)loadActions, (uint32_t *)pColorArraySlices, (uint32_t *)pColorMipSlices, (uint32_t)depthArraySlice, (uint32_t)depthMipSlice);
}

RHI_API void RHI_cmdSetViewport(RHI_CmdHandle p_cmd, float x, float y, float width, float height, float min_depth, float max_depth) {
    cmdSetViewport((Cmd *)p_cmd, (float)x, (float)y, (float)width, (float)height, (float)min_depth, (float)max_depth);
}

RHI_API void RHI_cmdSetScissor(RHI_CmdHandle p_cmd, uint32_t x, uint32_t y, uint32_t width, uint32_t height) {
    cmdSetScissor((Cmd *)p_cmd, (uint32_t)x, (uint32_t)y, (uint32_t)width, (uint32_t)height);
}

RHI_API void RHI_cmdBindPipeline(RHI_CmdHandle p_cmd, RHI_PipelineHandle p_pipeline) {
    cmdBindPipeline((Cmd *)p_cmd, (Pipeline *)p_pipeline);
}

RHI_API void RHI_cmdBindDescriptorSet(RHI_CmdHandle pCmd, uint32_t index, RHI_DescriptorSetHandle pDescriptorSet) {
    cmdBindDescriptorSet((Cmd *)pCmd, (uint32_t)index, (DescriptorSet *)pDescriptorSet);
}

RHI_API void RHI_cmdBindPushConstants(RHI_CmdHandle pCmd, RHI_RootSignatureHandle pRootSignature, const char * pName, const void * pConstants) {
    cmdBindPushConstants((Cmd *)pCmd, (RootSignature *)pRootSignature, (const char *)pName, (const void *)pConstants);
}

RHI_API void RHI_cmdBindPushConstantsByIndex(RHI_CmdHandle pCmd, RHI_RootSignatureHandle pRootSignature, uint32_t paramIndex, const void * pConstants) {
    cmdBindPushConstantsByIndex((Cmd *)pCmd, (RootSignature *)pRootSignature, (uint32_t)paramIndex, (const void *)pConstants);
}

RHI_API void RHI_cmdBindIndexBuffer(RHI_CmdHandle p_cmd, RHI_BufferHandle p_buffer, uint32_t indexType, uint64_t offset) {
    cmdBindIndexBuffer((Cmd *)p_cmd, (Buffer *)p_buffer, (uint32_t)indexType, (uint64_t)offset);
}

RHI_API void RHI_cmdBindVertexBuffer(RHI_CmdHandle p_cmd, uint32_t buffer_count, RHI_BufferHandle * pp_buffers, const uint32_t * pStrides, const uint64_t * pOffsets) {
    cmdBindVertexBuffer((Cmd *)p_cmd, (uint32_t)buffer_count, (Buffer **)pp_buffers, (const uint32_t *)pStrides, (const uint64_t *)pOffsets);
}

RHI_API void RHI_cmdDraw(RHI_CmdHandle p_cmd, uint32_t vertex_count, uint32_t first_vertex) {
    cmdDraw((Cmd *)p_cmd, (uint32_t)vertex_count, (uint32_t)first_vertex);
}

RHI_API void RHI_cmdDrawInstanced(RHI_CmdHandle pCmd, uint32_t vertexCount, uint32_t firstVertex, uint32_t instanceCount, uint32_t firstInstance) {
    cmdDrawInstanced((Cmd *)pCmd, (uint32_t)vertexCount, (uint32_t)firstVertex, (uint32_t)instanceCount, (uint32_t)firstInstance);
}

RHI_API void RHI_cmdDrawIndexed(RHI_CmdHandle p_cmd, uint32_t index_count, uint32_t first_index, uint32_t first_vertex) {
    cmdDrawIndexed((Cmd *)p_cmd, (uint32_t)index_count, (uint32_t)first_index, (uint32_t)first_vertex);
}

RHI_API void RHI_cmdDrawIndexedInstanced(RHI_CmdHandle pCmd, uint32_t indexCount, uint32_t firstIndex, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {
    cmdDrawIndexedInstanced((Cmd *)pCmd, (uint32_t)indexCount, (uint32_t)firstIndex, (uint32_t)instanceCount, (uint32_t)firstVertex, (uint32_t)firstInstance);
}

RHI_API void RHI_cmdDispatch(RHI_CmdHandle p_cmd, uint32_t group_count_x, uint32_t group_count_y, uint32_t group_count_z) {
    cmdDispatch((Cmd *)p_cmd, (uint32_t)group_count_x, (uint32_t)group_count_y, (uint32_t)group_count_z);
}

RHI_API void RHI_cmdResourceBarrier(RHI_CmdHandle p_cmd, uint32_t buffer_barrier_count, RHI_BufferBarrier * p_buffer_barriers, uint32_t texture_barrier_count, RHI_TextureBarrier * p_texture_barriers, uint32_t rt_barrier_count, RHI_RenderTargetBarrier * p_rt_barriers) {
    cmdResourceBarrier((Cmd *)p_cmd, (uint32_t)buffer_barrier_count, (BufferBarrier *)p_buffer_barriers, (uint32_t)texture_barrier_count, (TextureBarrier *)p_texture_barriers, (uint32_t)rt_barrier_count, (RenderTargetBarrier *)p_rt_barriers);
}

RHI_API void RHI_cmdUpdateVirtualTexture(RHI_CmdHandle pCmd, RHI_TextureHandle pTexture) {
    cmdUpdateVirtualTexture((Cmd *)pCmd, (Texture *)pTexture);
}

RHI_API void RHI_acquireNextImage(RHI_RendererHandle pRenderer, RHI_SwapChainHandle p_swap_chain, RHI_SemaphoreHandle p_signal_semaphore, RHI_FenceHandle p_fence, uint32_t * p_image_index) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    acquireNextImage((Renderer *)pRenderer, (SwapChain *)p_swap_chain, (Semaphore *)p_signal_semaphore, (Fence *)p_fence, (uint32_t *)p_image_index);
}

RHI_API void RHI_queueSubmit(RHI_QueueHandle p_queue, const RHI_QueueSubmitDesc * p_desc) {
    queueSubmit((Queue *)p_queue, (const QueueSubmitDesc *)p_desc);
}

RHI_API void RHI_queuePresent(RHI_QueueHandle p_queue, const RHI_QueuePresentDesc * p_desc) {
    queuePresent((Queue *)p_queue, (const QueuePresentDesc *)p_desc);
}

RHI_API void RHI_waitQueueIdle(RHI_QueueHandle p_queue) {
    waitQueueIdle((Queue *)p_queue);
}

RHI_API void RHI_getFenceStatus(RHI_RendererHandle pRenderer, RHI_FenceHandle p_fence, RHI_FenceStatus * p_fence_status) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    getFenceStatus((Renderer *)pRenderer, (Fence *)p_fence, (FenceStatus *)p_fence_status);
}

RHI_API void RHI_waitForFences(RHI_RendererHandle pRenderer, uint32_t fenceCount, RHI_FenceHandle * ppFences) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    waitForFences((Renderer *)pRenderer, (uint32_t)fenceCount, (Fence **)ppFences);
}

RHI_API void RHI_toggleVSync(RHI_RendererHandle pRenderer, RHI_SwapChainHandle * ppSwapchain) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    toggleVSync((Renderer *)pRenderer, (SwapChain **)ppSwapchain);
}

RHI_API RHI_ImageFormat RHI_getRecommendedSwapchainFormat(bool hintHDR) {
    return (RHI_ImageFormat)getRecommendedSwapchainFormat((bool)hintHDR);
}

RHI_API void RHI_addIndirectCommandSignature(RHI_RendererHandle pRenderer, const RHI_CommandSignatureDesc * p_desc, RHI_CommandSignatureHandle * ppCommandSignature) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addIndirectCommandSignature((Renderer *)pRenderer, (const CommandSignatureDesc *)p_desc, (CommandSignature **)ppCommandSignature);
}

RHI_API void RHI_removeIndirectCommandSignature(RHI_RendererHandle pRenderer, RHI_CommandSignatureHandle pCommandSignature) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeIndirectCommandSignature((Renderer *)pRenderer, (CommandSignature *)pCommandSignature);
}

RHI_API void RHI_cmdExecuteIndirect(RHI_CmdHandle pCmd, RHI_CommandSignatureHandle pCommandSignature, int maxCommandCount, RHI_BufferHandle pIndirectBuffer, uint64_t bufferOffset, RHI_BufferHandle pCounterBuffer, uint64_t counterBufferOffset) {
    cmdExecuteIndirect((Cmd *)pCmd, (CommandSignature *)pCommandSignature, (int)maxCommandCount, (Buffer *)pIndirectBuffer, (uint64_t)bufferOffset, (Buffer *)pCounterBuffer, (uint64_t)counterBufferOffset);
}

RHI_API void RHI_getTimestampFrequency(RHI_QueueHandle pQueue, double * pFrequency) {
    getTimestampFrequency((Queue *)pQueue, (double *)pFrequency);
}

RHI_API void RHI_addQueryPool(RHI_RendererHandle pRenderer, const RHI_QueryPoolDesc * pDesc, RHI_QueryPoolHandle * ppQueryPool) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addQueryPool((Renderer *)pRenderer, (const QueryPoolDesc *)pDesc, (QueryPool **)ppQueryPool);
}

RHI_API void RHI_removeQueryPool(RHI_RendererHandle pRenderer, RHI_QueryPoolHandle pQueryPool) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeQueryPool((Renderer *)pRenderer, (QueryPool *)pQueryPool);
}

RHI_API void RHI_cmdResetQueryPool(RHI_CmdHandle pCmd, RHI_QueryPoolHandle pQueryPool, uint32_t startQuery, uint32_t queryCount) {
    cmdResetQueryPool((Cmd *)pCmd, (QueryPool *)pQueryPool, (uint32_t)startQuery, (uint32_t)queryCount);
}

RHI_API void RHI_cmdBeginQuery(RHI_CmdHandle pCmd, RHI_QueryPoolHandle pQueryPool, RHI_QueryDesc * pQuery) {
    cmdBeginQuery((Cmd *)pCmd, (QueryPool *)pQueryPool, (QueryDesc *)pQuery);
}

RHI_API void RHI_cmdEndQuery(RHI_CmdHandle pCmd, RHI_QueryPoolHandle pQueryPool, RHI_QueryDesc * pQuery) {
    cmdEndQuery((Cmd *)pCmd, (QueryPool *)pQueryPool, (QueryDesc *)pQuery);
}

RHI_API void RHI_cmdResolveQuery(RHI_CmdHandle pCmd, RHI_QueryPoolHandle pQueryPool, RHI_BufferHandle pReadbackBuffer, uint32_t startQuery, uint32_t queryCount) {
    cmdResolveQuery((Cmd *)pCmd, (QueryPool *)pQueryPool, (Buffer *)pReadbackBuffer, (uint32_t)startQuery, (uint32_t)queryCount);
}

RHI_API void RHI_calculateMemoryStats(RHI_RendererHandle pRenderer, char ** stats) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    calculateMemoryStats((Renderer *)pRenderer, (char **)stats);
}

RHI_API void RHI_calculateMemoryUse(RHI_RendererHandle pRenderer, uint64_t * usedBytes, uint64_t * totalAllocatedBytes) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    calculateMemoryUse((Renderer *)pRenderer, (uint64_t *)usedBytes, (uint64_t *)totalAllocatedBytes);
}

RHI_API void RHI_freeMemoryStats(RHI_RendererHandle pRenderer, char * stats) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    freeMemoryStats((Renderer *)pRenderer, (char *)stats);
}

RHI_API void RHI_cmdBeginDebugMarker(RHI_CmdHandle pCmd, float r, float g, float b, const char * pName) {
    cmdBeginDebugMarker((Cmd *)pCmd, (float)r, (float)g, (float)b, (const char *)pName);
}

RHI_API void RHI_cmdEndDebugMarker(RHI_CmdHandle pCmd) {
    cmdEndDebugMarker((Cmd *)pCmd);
}

RHI_API void RHI_cmdAddDebugMarker(RHI_CmdHandle pCmd, float r, float g, float b, const char * pName) {
    cmdAddDebugMarker((Cmd *)pCmd, (float)r, (float)g, (float)b, (const char *)pName);
}

RHI_API void RHI_setBufferName(RHI_RendererHandle pRenderer, RHI_BufferHandle pBuffer, const char * pName) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    setBufferName((Renderer *)pRenderer, (Buffer *)pBuffer, (const char *)pName);
}

RHI_API void RHI_setTextureName(RHI_RendererHandle pRenderer, RHI_TextureHandle pTexture, const char * pName) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    setTextureName((Renderer *)pRenderer, (Texture *)pTexture, (const char *)pName);
}

RHI_API void RHI_setRenderTargetName(RHI_RendererHandle pRenderer, RHI_RenderTargetHandle pRenderTarget, const char * pName) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    setRenderTargetName((Renderer *)pRenderer, (RenderTarget *)pRenderTarget, (const char *)pName);
}

RHI_API void RHI_setPipelineName(RHI_RendererHandle pRenderer, RHI_PipelineHandle pPipeline, const char * pName) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    setPipelineName((Renderer *)pRenderer, (Pipeline *)pPipeline, (const char *)pName);
}

RHI_API void RHI_addBuffer(RHI_RendererHandle pRenderer, const RHI_BufferDesc * desc, RHI_BufferHandle * pp_buffer) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addBuffer((Renderer *)pRenderer, (const BufferDesc *)desc, (Buffer **)pp_buffer);
}

RHI_API void RHI_removeBuffer(RHI_RendererHandle pRenderer, RHI_BufferHandle p_buffer) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeBuffer((Renderer *)pRenderer, (Buffer *)p_buffer);
}

RHI_API void RHI_addTexture(RHI_RendererHandle pRenderer, const RHI_TextureDesc * pDesc, RHI_TextureHandle * pp_texture) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addTexture((Renderer *)pRenderer, (const TextureDesc *)pDesc, (Texture **)pp_texture);
}

RHI_API void RHI_removeTexture(RHI_RendererHandle pRenderer, RHI_TextureHandle p_texture) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeTexture((Renderer *)pRenderer, (Texture *)p_texture);
}

RHI_API void RHI_mapBuffer(RHI_RendererHandle pRenderer, RHI_BufferHandle pBuffer, RHI_ReadRange * pRange) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    mapBuffer((Renderer *)pRenderer, (Buffer *)pBuffer, (ReadRange *)pRange);
}

RHI_API void RHI_unmapBuffer(RHI_RendererHandle pRenderer, RHI_BufferHandle pBuffer) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    unmapBuffer((Renderer *)pRenderer, (Buffer *)pBuffer);
}

RHI_API void RHI_cmdUpdateBuffer(RHI_CmdHandle pCmd, RHI_BufferHandle pBuffer, uint64_t dstOffset, RHI_BufferHandle pSrcBuffer, uint64_t srcOffset, uint64_t size) {
    cmdUpdateBuffer((Cmd *)pCmd, (Buffer *)pBuffer, (uint64_t)dstOffset, (Buffer *)pSrcBuffer, (uint64_t)srcOffset, (uint64_t)size);
}

RHI_API void RHI_cmdUpdateSubresource(RHI_CmdHandle pCmd, RHI_TextureHandle pTexture, RHI_BufferHandle pSrcBuffer, RHI_SubresourceDataDesc * pSubresourceDesc) {
    
    SubresourceDataDesc desc{};
    desc.mSrcOffset = pSubresourceDesc->mSrcOffset;
    desc.mMipLevel = pSubresourceDesc->mMipLevel;
    desc.mArrayLayer = pSubresourceDesc->mArrayLayer;
#if defined(DIRECT3D11) || defined(METAL) || defined(VULKAN)
    desc.mRowPitch = pSubresourceDesc->mRowPitch;
    desc.mSlicePitch = pSubresourceDesc->mSlicePitch;
#endif
    cmdUpdateSubresource((Cmd *)pCmd, (Texture *)pTexture, (Buffer *)pSrcBuffer, &desc);
}
// Resource loader functions
RHI_API void RHI_initResourceLoaderInterface(RHI_RendererHandle pRenderer, RHI_ResourceLoaderDesc * pDesc) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    initResourceLoaderInterface((Renderer *)pRenderer, (ResourceLoaderDesc *)pDesc);
}

RHI_API void RHI_exitResourceLoaderInterface(RHI_RendererHandle pRenderer) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    exitResourceLoaderInterface((Renderer *)pRenderer);
}

RHI_API void RHI_addBufferResource(RHI_BufferLoadDesc * pBufferDesc, RHI_SyncToken * token) {
    addResource((BufferLoadDesc *)pBufferDesc, (SyncToken *)token);
}

RHI_API void RHI_addTextureResource(RHI_TextureLoadDesc * pTextureDesc, RHI_SyncToken * token) {
    addResource((TextureLoadDesc *)pTextureDesc, (SyncToken *)token);
}

RHI_API void RHI_addGeomResource(RHI_GeometryLoadDesc * pGeomDesc, RHI_SyncToken * token) {
    addResource((GeometryLoadDesc *)pGeomDesc, (SyncToken *)token);
}

RHI_API void RHI_beginUpdateBufferResource(RHI_BufferUpdateDesc * pBufferDesc) {
    beginUpdateResource((BufferUpdateDesc *)pBufferDesc);
}

RHI_API void RHI_beginUpdateTextureResource(RHI_TextureUpdateDesc * pTextureDesc) {
    beginUpdateResource((TextureUpdateDesc *)pTextureDesc);
}

RHI_API void RHI_endUpdateBufferResource(RHI_BufferUpdateDesc * pBuffer, RHI_SyncToken * token) {
    endUpdateResource((BufferUpdateDesc *)pBuffer, (SyncToken *)token);
}

RHI_API void RHI_endUpdateTextureResource(RHI_TextureUpdateDesc * pTexture, RHI_SyncToken * token) {
    endUpdateResource((TextureUpdateDesc *)pTexture, (SyncToken *)token);
}

RHI_API void RHI_removeBufferResource(RHI_BufferHandle pBuffer) {
    removeResource((Buffer *)pBuffer);
}

RHI_API void RHI_removeTextureResource(RHI_TextureHandle pTexture) {
    removeResource((Texture *)pTexture);
}

RHI_API void RHI_removeGeomResource(RHI_Geometry * pGeom) {
    removeResource((Geometry *)pGeom);
}

RHI_API bool RHI_allResourceLoadsCompleted() {
    return (bool)allResourceLoadsCompleted();
}

RHI_API void RHI_waitForAllResourceLoads() {
    waitForAllResourceLoads();
}

RHI_API RHI_SyncToken RHI_getLastTokenCompleted() {
    return (RHI_SyncToken)getLastTokenCompleted();
}

RHI_API bool RHI_isTokenCompleted(const RHI_SyncToken * token) {
    return (bool)isTokenCompleted((const SyncToken *)token);
}

RHI_API void RHI_waitForToken(const RHI_SyncToken * token) {
    waitForToken((const SyncToken *)token);
}

RHI_API void RHI_loadShader(RHI_RendererHandle pRenderer, const RHI_ShaderLoadDesc * pDesc, RHI_ShaderHandle * pShader) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addShader((Renderer *)pRenderer, (const ShaderLoadDesc *)pDesc, (Shader **)pShader);
}

RHI_API void RHI_loadPipelineCache(RHI_RendererHandle pRenderer, const RHI_PipelineCacheLoadDesc * pDesc, RHI_PipelineCacheHandle * ppPipelineCache) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addPipelineCache((Renderer *)pRenderer, (const PipelineCacheLoadDesc *)pDesc, (PipelineCache **)ppPipelineCache);
}

RHI_API void RHI_savePipelineCache(RHI_RendererHandle pRenderer, RHI_PipelineCacheHandle pPipelineCache, RHI_PipelineCacheSaveDesc * pDesc) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    savePipelineCache((Renderer *)pRenderer, (PipelineCache *)pPipelineCache, (PipelineCacheSaveDesc *)pDesc);
}

// Ray functions
RHI_API bool RHI_isRaytracingSupported(RHI_RendererHandle pRenderer) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return (bool)0;}
    return (bool)isRaytracingSupported((Renderer *)pRenderer);
}

RHI_API bool RHI_initRaytracing(RHI_RendererHandle pRenderer, RHI_RaytracingHandle * ppRaytracing) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return (bool)0;}
    return (bool)initRaytracing((Renderer *)pRenderer, (Raytracing **)ppRaytracing);
}

RHI_API void RHI_removeRaytracing(RHI_RendererHandle pRenderer, RHI_RaytracingHandle pRaytracing) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    removeRaytracing((Renderer *)pRenderer, (Raytracing *)pRaytracing);
}

RHI_API void RHI_addAccelerationStructure(RHI_RaytracingHandle pRaytracing, const RHI_AccelerationStructureDescTop * pDesc, RHI_AccelerationStructureHandle * ppAccelerationStructure) {
    addAccelerationStructure((Raytracing *)pRaytracing, (const AccelerationStructureDescTop *)pDesc, (AccelerationStructure **)ppAccelerationStructure);
}

RHI_API void RHI_removeAccelerationStructure(RHI_RaytracingHandle pRaytracing, RHI_AccelerationStructureHandle pAccelerationStructure) {
    removeAccelerationStructure((Raytracing *)pRaytracing, (AccelerationStructure *)pAccelerationStructure);
}

RHI_API void RHI_addRaytracingShaderTable(RHI_RaytracingHandle pRaytracing, const RHI_RaytracingShaderTableDesc * pDesc, RHI_RaytracingShaderTableHandle * ppTable) {
    addRaytracingShaderTable((Raytracing *)pRaytracing, (const RaytracingShaderTableDesc *)pDesc, (RaytracingShaderTable **)ppTable);
}

RHI_API void RHI_removeRaytracingShaderTable(RHI_RaytracingHandle pRaytracing, RHI_RaytracingShaderTableHandle pTable) {
    removeRaytracingShaderTable((Raytracing *)pRaytracing, (RaytracingShaderTable *)pTable);
}

RHI_API void RHI_cmdBuildAccelerationStructure(RHI_CmdHandle pCmd, RHI_RaytracingHandle pRaytracing, RHI_RaytracingBuildASDesc * pDesc) {
    cmdBuildAccelerationStructure((Cmd *)pCmd, (Raytracing *)pRaytracing, (RaytracingBuildASDesc *)pDesc);
}

RHI_API void RHI_cmdDispatchRays(RHI_CmdHandle pCmd, RHI_RaytracingHandle pRaytracing, const RHI_RaytracingDispatchDesc * pDesc) {
    cmdDispatchRays((Cmd *)pCmd, (Raytracing *)pRaytracing, (const RaytracingDispatchDesc *)pDesc);
}

#ifdef METAL
RHI_API void RHI_addSSVGFDenoiser(RHI_RendererHandle pRenderer, RHI_SSVGFDenoiser ** ppDenoiser) {
    auto renderer = (Renderer *)pRenderer;
    if(!renderer){return;}
    addSSVGFDenoiser((Renderer *)pRenderer, (SSVGFDenoiser **)ppDenoiser);
}
#endif // METAL
#ifdef METAL
RHI_API void RHI_removeSSVGFDenoiser(RHI_SSVGFDenoiser * pDenoiser) {
    removeSSVGFDenoiser((SSVGFDenoiser *)pDenoiser);
}
#endif // METAL
#ifdef METAL
RHI_API void RHI_clearSSVGFDenoiserTemporalHistory(RHI_SSVGFDenoiser * pDenoiser) {
    clearSSVGFDenoiserTemporalHistory((SSVGFDenoiser *)pDenoiser);
}
#endif // METAL
#ifdef METAL
RHI_API void RHI_cmdSSVGFDenoise(RHI_CmdHandle pCmd, RHI_SSVGFDenoiser * pDenoiser, RHI_TextureHandle pSourceTexture, RHI_TextureHandle pMotionVectorTexture, RHI_TextureHandle pDepthNormalTexture, RHI_TextureHandle pPreviousDepthNormalTexture, RHI_TextureHandle * ppOut) {
    cmdSSVGFDenoise((Cmd *)pCmd, (SSVGFDenoiser *)pDenoiser, (Texture *)pSourceTexture, (Texture *)pMotionVectorTexture, (Texture *)pDepthNormalTexture, (Texture *)pPreviousDepthNormalTexture, (Texture **)ppOut);
}
#endif // METAL
// Shader reflection functions
RHI_API void RHI_destroyShaderReflection(RHI_ShaderReflection * pReflection) {
    destroyShaderReflection((ShaderReflection *)pReflection);
}

RHI_API void RHI_createPipelineReflection(RHI_ShaderReflection * pReflection, uint32_t stageCount, RHI_PipelineReflection * pOutReflection) {
    createPipelineReflection((ShaderReflection *)pReflection, (uint32_t)stageCount, (PipelineReflection *)pOutReflection);
}

RHI_API void RHI_destroyPipelineReflection(RHI_PipelineReflection * pReflection) {
    destroyPipelineReflection((PipelineReflection *)pReflection);
}



RHI_API RHI_RenderTargetHandle RHI_swapChainGetRenderTarget(RHI_SwapChainHandle swapChain, int index)
{
    return (RHI_RenderTargetHandle) ((SwapChain *) swapChain)->ppRenderTargets[index];
}

RHI_API bool RHI_swapChainGetVSync(RHI_SwapChainHandle handle)
{
    return ((SwapChain*)handle)->mEnableVsync;
}

RHI_API RHI_TextureHandle RHI_renderTargetGetTexture(RHI_RenderTargetHandle renderTarget)
{
    return (RHI_TextureHandle) ((RenderTarget *) renderTarget)->pTexture;
}

RHI_API void RHI_renderTargetGetDesc(RHI_RenderTargetHandle renderTarget, RHI_RenderTargetDesc &desc)
{
    RenderTarget *rt = (RenderTarget*)renderTarget;
    desc.mWidth = rt->mWidth;
    desc.mHeight = rt->mHeight;
    desc.mDepth = rt->mDepth;
    desc.mArraySize = rt->mArraySize;
    desc.mMipLevels = rt->mMipLevels;
    desc.mSampleCount = (RHI_SampleCount)rt->mSampleCount;
    desc.mFormat = (RHI_ImageFormat)rt->mFormat;
    ClearValue cv;
    memcpy(&desc.mClearValue, &rt->mClearValue, sizeof(ClearValue));
    desc.mSampleQuality = rt->mSampleQuality;
    desc.mDescriptors = (RHI_DescriptorType)rt->mDescriptors;
}

RHI_API uint32_t RHI_textureGetWidth(RHI_TextureHandle handle)
{
    return ((Texture*)handle)->mWidth;
}

RHI_API uint32_t RHI_textureGetHeight(RHI_TextureHandle handle)
{
    return ((Texture*)handle)->mHeight;
}

RHI_API uint32_t RHI_textureGetDepth(RHI_TextureHandle handle)
{
    return ((Texture*)handle)->mDepth;
}

RHI_API uint32_t RHI_textureGetMipLevels(RHI_TextureHandle handle)
{
    return ((Texture*)handle)->mMipLevels;
}

RHI_API RHI_RendererApi RHI_getRendererApi(RHI_RendererHandle handle)
{
    auto renderer = (Renderer *) handle;
    if (!renderer)
    {
        return RHI_RENDERER_API_VULKAN;
    }

    return (RHI_RendererApi) renderer->mApi;
}

RHI_API bool RHI_canShaderReadFrom(RHI_RendererHandle handle, RHI_ImageFormat format)
{
    auto renderer = (Renderer *) handle;
    if (!renderer)
    {
        return false;
    }
    if( (int)format > (int)TinyImageFormat_Count )
    {
        return false;
    }
    return renderer->pCapBits->canShaderReadFrom[(TinyImageFormat)format];
}
RHI_API bool RHI_canShaderWriteTo(RHI_RendererHandle handle, RHI_ImageFormat format)
{
    auto renderer = (Renderer *) handle;
    if (!renderer)
    {
        return false;
    }
    if( (int)format > (int)TinyImageFormat_Count )
    {
        return false;
    }
    return renderer->pCapBits->canShaderWriteTo[(TinyImageFormat)format];
}

RHI_API bool RHI_canRenderTargetWriteTo(RHI_RendererHandle handle, RHI_ImageFormat format)
{
    auto renderer = (Renderer *) handle;
    if (!renderer)
    {
        return false;
    }
    if( (int)format > (int)TinyImageFormat_Count )
    {
        return false;
    }
    return renderer->pCapBits->canRenderTargetWriteTo[(TinyImageFormat)format];
}

    

#define API_CHK(x) static_assert(x, "Mismatched size!")

static void API_CHECK() {
    API_CHK(sizeof(RHI_IndirectDrawArguments) == sizeof(IndirectDrawArguments));
    API_CHK(offsetof(RHI_IndirectDrawArguments, mVertexCount) == offsetof(IndirectDrawArguments, mVertexCount));
    API_CHK(offsetof(RHI_IndirectDrawArguments, mInstanceCount) == offsetof(IndirectDrawArguments, mInstanceCount));
    API_CHK(offsetof(RHI_IndirectDrawArguments, mStartVertex) == offsetof(IndirectDrawArguments, mStartVertex));
    API_CHK(offsetof(RHI_IndirectDrawArguments, mStartInstance) == offsetof(IndirectDrawArguments, mStartInstance));
    API_CHK(sizeof(RHI_IndirectDrawIndexArguments) == sizeof(IndirectDrawIndexArguments));
    API_CHK(offsetof(RHI_IndirectDrawIndexArguments, mIndexCount) == offsetof(IndirectDrawIndexArguments, mIndexCount));
    API_CHK(offsetof(RHI_IndirectDrawIndexArguments, mInstanceCount) == offsetof(IndirectDrawIndexArguments, mInstanceCount));
    API_CHK(offsetof(RHI_IndirectDrawIndexArguments, mStartIndex) == offsetof(IndirectDrawIndexArguments, mStartIndex));
    API_CHK(offsetof(RHI_IndirectDrawIndexArguments, mVertexOffset) == offsetof(IndirectDrawIndexArguments, mVertexOffset));
    API_CHK(offsetof(RHI_IndirectDrawIndexArguments, mStartInstance) == offsetof(IndirectDrawIndexArguments, mStartInstance));
    API_CHK(sizeof(RHI_IndirectDispatchArguments) == sizeof(IndirectDispatchArguments));
    API_CHK(offsetof(RHI_IndirectDispatchArguments, mGroupCountX) == offsetof(IndirectDispatchArguments, mGroupCountX));
    API_CHK(offsetof(RHI_IndirectDispatchArguments, mGroupCountY) == offsetof(IndirectDispatchArguments, mGroupCountY));
    API_CHK(offsetof(RHI_IndirectDispatchArguments, mGroupCountZ) == offsetof(IndirectDispatchArguments, mGroupCountZ));
    API_CHK(sizeof(RHI_ClearValue) == sizeof(ClearValue));
    API_CHK(sizeof(RHI_BufferBarrier) == sizeof(BufferBarrier));
    API_CHK(offsetof(RHI_BufferBarrier, pBuffer) == offsetof(BufferBarrier, pBuffer));
    API_CHK(offsetof(RHI_BufferBarrier, mCurrentState) == offsetof(BufferBarrier, mCurrentState));
    API_CHK(offsetof(RHI_BufferBarrier, mNewState) == offsetof(BufferBarrier, mNewState));
    API_CHK(sizeof(RHI_TextureBarrier) == sizeof(TextureBarrier));
    API_CHK(offsetof(RHI_TextureBarrier, pTexture) == offsetof(TextureBarrier, pTexture));
    API_CHK(offsetof(RHI_TextureBarrier, mCurrentState) == offsetof(TextureBarrier, mCurrentState));
    API_CHK(offsetof(RHI_TextureBarrier, mNewState) == offsetof(TextureBarrier, mNewState));
    API_CHK(sizeof(RHI_RenderTargetBarrier) == sizeof(RenderTargetBarrier));
    API_CHK(offsetof(RHI_RenderTargetBarrier, pRenderTarget) == offsetof(RenderTargetBarrier, pRenderTarget));
    API_CHK(offsetof(RHI_RenderTargetBarrier, mCurrentState) == offsetof(RenderTargetBarrier, mCurrentState));
    API_CHK(offsetof(RHI_RenderTargetBarrier, mNewState) == offsetof(RenderTargetBarrier, mNewState));
    API_CHK(sizeof(RHI_ReadRange) == sizeof(ReadRange));
    API_CHK(offsetof(RHI_ReadRange, mOffset) == offsetof(ReadRange, mOffset));
    API_CHK(offsetof(RHI_ReadRange, mSize) == offsetof(ReadRange, mSize));
    API_CHK(sizeof(RHI_QueryPoolDesc) == sizeof(QueryPoolDesc));
    API_CHK(offsetof(RHI_QueryPoolDesc, mType) == offsetof(QueryPoolDesc, mType));
    API_CHK(offsetof(RHI_QueryPoolDesc, mQueryCount) == offsetof(QueryPoolDesc, mQueryCount));
    API_CHK(offsetof(RHI_QueryPoolDesc, mNodeIndex) == offsetof(QueryPoolDesc, mNodeIndex));
    API_CHK(sizeof(RHI_QueryDesc) == sizeof(QueryDesc));
    API_CHK(offsetof(RHI_QueryDesc, mIndex) == offsetof(QueryDesc, mIndex));
    API_CHK(sizeof(RHI_BufferDesc) == sizeof(BufferDesc));
    API_CHK(offsetof(RHI_BufferDesc, mSize) == offsetof(BufferDesc, mSize));
    API_CHK(offsetof(RHI_BufferDesc, mAlignment) == offsetof(BufferDesc, mAlignment));
    API_CHK(offsetof(RHI_BufferDesc, mMemoryUsage) == offsetof(BufferDesc, mMemoryUsage));
    API_CHK(offsetof(RHI_BufferDesc, mFlags) == offsetof(BufferDesc, mFlags));
    API_CHK(offsetof(RHI_BufferDesc, mQueueType) == offsetof(BufferDesc, mQueueType));
    API_CHK(offsetof(RHI_BufferDesc, mStartState) == offsetof(BufferDesc, mStartState));
    API_CHK(offsetof(RHI_BufferDesc, mFirstElement) == offsetof(BufferDesc, mFirstElement));
    API_CHK(offsetof(RHI_BufferDesc, mElementCount) == offsetof(BufferDesc, mElementCount));
    API_CHK(offsetof(RHI_BufferDesc, mStructStride) == offsetof(BufferDesc, mStructStride));
    API_CHK(offsetof(RHI_BufferDesc, mICBDrawType) == offsetof(BufferDesc, mICBDrawType));
    API_CHK(offsetof(RHI_BufferDesc, mICBMaxVertexBufferBind) == offsetof(BufferDesc, mICBMaxVertexBufferBind));
    API_CHK(offsetof(RHI_BufferDesc, mICBMaxFragmentBufferBind) == offsetof(BufferDesc, mICBMaxFragmentBufferBind));
    API_CHK(offsetof(RHI_BufferDesc, pCounterBuffer) == offsetof(BufferDesc, pCounterBuffer));
    API_CHK(offsetof(RHI_BufferDesc, mFormat) == offsetof(BufferDesc, mFormat));
    API_CHK(offsetof(RHI_BufferDesc, mDescriptors) == offsetof(BufferDesc, mDescriptors));
    API_CHK(offsetof(RHI_BufferDesc, pName) == offsetof(BufferDesc, pName));
    API_CHK(offsetof(RHI_BufferDesc, pSharedNodeIndices) == offsetof(BufferDesc, pSharedNodeIndices));
    API_CHK(offsetof(RHI_BufferDesc, mNodeIndex) == offsetof(BufferDesc, mNodeIndex));
    API_CHK(offsetof(RHI_BufferDesc, mSharedNodeIndexCount) == offsetof(BufferDesc, mSharedNodeIndexCount));
    API_CHK(sizeof(RHI_TextureDesc) == sizeof(TextureDesc));
    API_CHK(offsetof(RHI_TextureDesc, mFlags) == offsetof(TextureDesc, mFlags));
    API_CHK(offsetof(RHI_TextureDesc, mWidth) == offsetof(TextureDesc, mWidth));
    API_CHK(offsetof(RHI_TextureDesc, mHeight) == offsetof(TextureDesc, mHeight));
    API_CHK(offsetof(RHI_TextureDesc, mDepth) == offsetof(TextureDesc, mDepth));
    API_CHK(offsetof(RHI_TextureDesc, mArraySize) == offsetof(TextureDesc, mArraySize));
    API_CHK(offsetof(RHI_TextureDesc, mMipLevels) == offsetof(TextureDesc, mMipLevels));
    API_CHK(offsetof(RHI_TextureDesc, mSampleCount) == offsetof(TextureDesc, mSampleCount));
    API_CHK(offsetof(RHI_TextureDesc, mSampleQuality) == offsetof(TextureDesc, mSampleQuality));
    API_CHK(offsetof(RHI_TextureDesc, mFormat) == offsetof(TextureDesc, mFormat));
    API_CHK(offsetof(RHI_TextureDesc, mClearValue) == offsetof(TextureDesc, mClearValue));
    API_CHK(offsetof(RHI_TextureDesc, mStartState) == offsetof(TextureDesc, mStartState));
    API_CHK(offsetof(RHI_TextureDesc, mDescriptors) == offsetof(TextureDesc, mDescriptors));
    API_CHK(offsetof(RHI_TextureDesc, pNativeHandle) == offsetof(TextureDesc, pNativeHandle));
    API_CHK(offsetof(RHI_TextureDesc, pName) == offsetof(TextureDesc, pName));
    API_CHK(offsetof(RHI_TextureDesc, pSharedNodeIndices) == offsetof(TextureDesc, pSharedNodeIndices));
    API_CHK(offsetof(RHI_TextureDesc, mSharedNodeIndexCount) == offsetof(TextureDesc, mSharedNodeIndexCount));
    API_CHK(offsetof(RHI_TextureDesc, mNodeIndex) == offsetof(TextureDesc, mNodeIndex));
    API_CHK(offsetof(RHI_TextureDesc, mHostVisible) == offsetof(TextureDesc, mHostVisible));
    API_CHK(sizeof(RHI_RenderTargetDesc) == sizeof(RenderTargetDesc));
    API_CHK(offsetof(RHI_RenderTargetDesc, mFlags) == offsetof(RenderTargetDesc, mFlags));
    API_CHK(offsetof(RHI_RenderTargetDesc, mWidth) == offsetof(RenderTargetDesc, mWidth));
    API_CHK(offsetof(RHI_RenderTargetDesc, mHeight) == offsetof(RenderTargetDesc, mHeight));
    API_CHK(offsetof(RHI_RenderTargetDesc, mDepth) == offsetof(RenderTargetDesc, mDepth));
    API_CHK(offsetof(RHI_RenderTargetDesc, mArraySize) == offsetof(RenderTargetDesc, mArraySize));
    API_CHK(offsetof(RHI_RenderTargetDesc, mMipLevels) == offsetof(RenderTargetDesc, mMipLevels));
    API_CHK(offsetof(RHI_RenderTargetDesc, mSampleCount) == offsetof(RenderTargetDesc, mSampleCount));
    API_CHK(offsetof(RHI_RenderTargetDesc, mFormat) == offsetof(RenderTargetDesc, mFormat));
    API_CHK(offsetof(RHI_RenderTargetDesc, mStartState) == offsetof(RenderTargetDesc, mStartState));
    API_CHK(offsetof(RHI_RenderTargetDesc, mClearValue) == offsetof(RenderTargetDesc, mClearValue));
    API_CHK(offsetof(RHI_RenderTargetDesc, mSampleQuality) == offsetof(RenderTargetDesc, mSampleQuality));
    API_CHK(offsetof(RHI_RenderTargetDesc, mDescriptors) == offsetof(RenderTargetDesc, mDescriptors));
    API_CHK(offsetof(RHI_RenderTargetDesc, pNativeHandle) == offsetof(RenderTargetDesc, pNativeHandle));
    API_CHK(offsetof(RHI_RenderTargetDesc, pName) == offsetof(RenderTargetDesc, pName));
    API_CHK(offsetof(RHI_RenderTargetDesc, pSharedNodeIndices) == offsetof(RenderTargetDesc, pSharedNodeIndices));
    API_CHK(offsetof(RHI_RenderTargetDesc, mSharedNodeIndexCount) == offsetof(RenderTargetDesc, mSharedNodeIndexCount));
    API_CHK(offsetof(RHI_RenderTargetDesc, mNodeIndex) == offsetof(RenderTargetDesc, mNodeIndex));
    API_CHK(sizeof(RHI_LoadActionsDesc) == sizeof(LoadActionsDesc));
    API_CHK(offsetof(RHI_LoadActionsDesc, mClearColorValues) == offsetof(LoadActionsDesc, mClearColorValues));
    API_CHK(offsetof(RHI_LoadActionsDesc, mLoadActionsColor) == offsetof(LoadActionsDesc, mLoadActionsColor));
    API_CHK(offsetof(RHI_LoadActionsDesc, mClearDepth) == offsetof(LoadActionsDesc, mClearDepth));
    API_CHK(offsetof(RHI_LoadActionsDesc, mLoadActionDepth) == offsetof(LoadActionsDesc, mLoadActionDepth));
    API_CHK(offsetof(RHI_LoadActionsDesc, mLoadActionStencil) == offsetof(LoadActionsDesc, mLoadActionStencil));
    API_CHK(sizeof(RHI_SamplerDesc) == sizeof(SamplerDesc));
    API_CHK(offsetof(RHI_SamplerDesc, mMinFilter) == offsetof(SamplerDesc, mMinFilter));
    API_CHK(offsetof(RHI_SamplerDesc, mMagFilter) == offsetof(SamplerDesc, mMagFilter));
    API_CHK(offsetof(RHI_SamplerDesc, mMipMapMode) == offsetof(SamplerDesc, mMipMapMode));
    API_CHK(offsetof(RHI_SamplerDesc, mAddressU) == offsetof(SamplerDesc, mAddressU));
    API_CHK(offsetof(RHI_SamplerDesc, mAddressV) == offsetof(SamplerDesc, mAddressV));
    API_CHK(offsetof(RHI_SamplerDesc, mAddressW) == offsetof(SamplerDesc, mAddressW));
    API_CHK(offsetof(RHI_SamplerDesc, mMipLodBias) == offsetof(SamplerDesc, mMipLodBias));
    API_CHK(offsetof(RHI_SamplerDesc, mMaxAnisotropy) == offsetof(SamplerDesc, mMaxAnisotropy));
    API_CHK(offsetof(RHI_SamplerDesc, mCompareFunc) == offsetof(SamplerDesc, mCompareFunc));
    API_CHK(sizeof(RHI_RootSignatureDesc) == sizeof(RootSignatureDesc));
    API_CHK(offsetof(RHI_RootSignatureDesc, ppShaders) == offsetof(RootSignatureDesc, ppShaders));
    API_CHK(offsetof(RHI_RootSignatureDesc, mShaderCount) == offsetof(RootSignatureDesc, mShaderCount));
    API_CHK(offsetof(RHI_RootSignatureDesc, mMaxBindlessTextures) == offsetof(RootSignatureDesc, mMaxBindlessTextures));
    API_CHK(offsetof(RHI_RootSignatureDesc, ppStaticSamplerNames) == offsetof(RootSignatureDesc, ppStaticSamplerNames));
    API_CHK(offsetof(RHI_RootSignatureDesc, ppStaticSamplers) == offsetof(RootSignatureDesc, ppStaticSamplers));
    API_CHK(offsetof(RHI_RootSignatureDesc, mStaticSamplerCount) == offsetof(RootSignatureDesc, mStaticSamplerCount));
    API_CHK(offsetof(RHI_RootSignatureDesc, mFlags) == offsetof(RootSignatureDesc, mFlags));
    API_CHK(sizeof(RHI_DescriptorData) == sizeof(DescriptorData));
    API_CHK(offsetof(RHI_DescriptorData, pName) == offsetof(DescriptorData, pName));
    API_CHK(offsetof(RHI_DescriptorData, mCount) == offsetof(DescriptorData, mCount));
    API_CHK(offsetof(RHI_DescriptorData, mIndex) == offsetof(DescriptorData, mIndex));
    API_CHK(offsetof(RHI_DescriptorData, mExtractBuffer) == offsetof(DescriptorData, mExtractBuffer));
    API_CHK(sizeof(RHI_CmdPoolDesc) == sizeof(CmdPoolDesc));
    API_CHK(offsetof(RHI_CmdPoolDesc, pQueue) == offsetof(CmdPoolDesc, pQueue));
    API_CHK(offsetof(RHI_CmdPoolDesc, mTransient) == offsetof(CmdPoolDesc, mTransient));
    API_CHK(sizeof(RHI_CmdDesc) == sizeof(CmdDesc));
    API_CHK(offsetof(RHI_CmdDesc, pPool) == offsetof(CmdDesc, pPool));
    API_CHK(offsetof(RHI_CmdDesc, mSecondary) == offsetof(CmdDesc, mSecondary));
    API_CHK(sizeof(RHI_QueueDesc) == sizeof(QueueDesc));
    API_CHK(offsetof(RHI_QueueDesc, mType) == offsetof(QueueDesc, mType));
    API_CHK(offsetof(RHI_QueueDesc, mFlag) == offsetof(QueueDesc, mFlag));
    API_CHK(offsetof(RHI_QueueDesc, mPriority) == offsetof(QueueDesc, mPriority));
    API_CHK(offsetof(RHI_QueueDesc, mNodeIndex) == offsetof(QueueDesc, mNodeIndex));
    API_CHK(sizeof(RHI_ShaderMacro) == sizeof(ShaderMacro));
    API_CHK(offsetof(RHI_ShaderMacro, definition) == offsetof(ShaderMacro, definition));
    API_CHK(offsetof(RHI_ShaderMacro, value) == offsetof(ShaderMacro, value));
    API_CHK(sizeof(RHI_BlendStateDesc) == sizeof(BlendStateDesc));
    API_CHK(offsetof(RHI_BlendStateDesc, mSrcFactors) == offsetof(BlendStateDesc, mSrcFactors));
    API_CHK(offsetof(RHI_BlendStateDesc, mDstFactors) == offsetof(BlendStateDesc, mDstFactors));
    API_CHK(offsetof(RHI_BlendStateDesc, mSrcAlphaFactors) == offsetof(BlendStateDesc, mSrcAlphaFactors));
    API_CHK(offsetof(RHI_BlendStateDesc, mDstAlphaFactors) == offsetof(BlendStateDesc, mDstAlphaFactors));
    API_CHK(offsetof(RHI_BlendStateDesc, mBlendModes) == offsetof(BlendStateDesc, mBlendModes));
    API_CHK(offsetof(RHI_BlendStateDesc, mBlendAlphaModes) == offsetof(BlendStateDesc, mBlendAlphaModes));
    API_CHK(offsetof(RHI_BlendStateDesc, mMasks) == offsetof(BlendStateDesc, mMasks));
    API_CHK(offsetof(RHI_BlendStateDesc, mRenderTargetMask) == offsetof(BlendStateDesc, mRenderTargetMask));
    API_CHK(offsetof(RHI_BlendStateDesc, mAlphaToCoverage) == offsetof(BlendStateDesc, mAlphaToCoverage));
    API_CHK(offsetof(RHI_BlendStateDesc, mIndependentBlend) == offsetof(BlendStateDesc, mIndependentBlend));
    API_CHK(sizeof(RHI_DepthStateDesc) == sizeof(DepthStateDesc));
    API_CHK(offsetof(RHI_DepthStateDesc, mDepthTest) == offsetof(DepthStateDesc, mDepthTest));
    API_CHK(offsetof(RHI_DepthStateDesc, mDepthWrite) == offsetof(DepthStateDesc, mDepthWrite));
    API_CHK(offsetof(RHI_DepthStateDesc, mDepthFunc) == offsetof(DepthStateDesc, mDepthFunc));
    API_CHK(offsetof(RHI_DepthStateDesc, mStencilTest) == offsetof(DepthStateDesc, mStencilTest));
    API_CHK(offsetof(RHI_DepthStateDesc, mStencilReadMask) == offsetof(DepthStateDesc, mStencilReadMask));
    API_CHK(offsetof(RHI_DepthStateDesc, mStencilWriteMask) == offsetof(DepthStateDesc, mStencilWriteMask));
    API_CHK(offsetof(RHI_DepthStateDesc, mStencilFrontFunc) == offsetof(DepthStateDesc, mStencilFrontFunc));
    API_CHK(offsetof(RHI_DepthStateDesc, mStencilFrontFail) == offsetof(DepthStateDesc, mStencilFrontFail));
    API_CHK(offsetof(RHI_DepthStateDesc, mDepthFrontFail) == offsetof(DepthStateDesc, mDepthFrontFail));
    API_CHK(offsetof(RHI_DepthStateDesc, mStencilFrontPass) == offsetof(DepthStateDesc, mStencilFrontPass));
    API_CHK(offsetof(RHI_DepthStateDesc, mStencilBackFunc) == offsetof(DepthStateDesc, mStencilBackFunc));
    API_CHK(offsetof(RHI_DepthStateDesc, mStencilBackFail) == offsetof(DepthStateDesc, mStencilBackFail));
    API_CHK(offsetof(RHI_DepthStateDesc, mDepthBackFail) == offsetof(DepthStateDesc, mDepthBackFail));
    API_CHK(offsetof(RHI_DepthStateDesc, mStencilBackPass) == offsetof(DepthStateDesc, mStencilBackPass));
    API_CHK(sizeof(RHI_RasterizerStateDesc) == sizeof(RasterizerStateDesc));
    API_CHK(offsetof(RHI_RasterizerStateDesc, mCullMode) == offsetof(RasterizerStateDesc, mCullMode));
    API_CHK(offsetof(RHI_RasterizerStateDesc, mDepthBias) == offsetof(RasterizerStateDesc, mDepthBias));
    API_CHK(offsetof(RHI_RasterizerStateDesc, mSlopeScaledDepthBias) == offsetof(RasterizerStateDesc, mSlopeScaledDepthBias));
    API_CHK(offsetof(RHI_RasterizerStateDesc, mFillMode) == offsetof(RasterizerStateDesc, mFillMode));
    API_CHK(offsetof(RHI_RasterizerStateDesc, mMultiSample) == offsetof(RasterizerStateDesc, mMultiSample));
    API_CHK(offsetof(RHI_RasterizerStateDesc, mScissor) == offsetof(RasterizerStateDesc, mScissor));
    API_CHK(offsetof(RHI_RasterizerStateDesc, mFrontFace) == offsetof(RasterizerStateDesc, mFrontFace));
    API_CHK(offsetof(RHI_RasterizerStateDesc, mDepthClampEnable) == offsetof(RasterizerStateDesc, mDepthClampEnable));
    API_CHK(sizeof(RHI_VertexAttrib) == sizeof(VertexAttrib));
    API_CHK(offsetof(RHI_VertexAttrib, mSemantic) == offsetof(VertexAttrib, mSemantic));
    API_CHK(offsetof(RHI_VertexAttrib, mSemanticNameLength) == offsetof(VertexAttrib, mSemanticNameLength));
    API_CHK(offsetof(RHI_VertexAttrib, mSemanticName) == offsetof(VertexAttrib, mSemanticName));
    API_CHK(offsetof(RHI_VertexAttrib, mFormat) == offsetof(VertexAttrib, mFormat));
    API_CHK(offsetof(RHI_VertexAttrib, mBinding) == offsetof(VertexAttrib, mBinding));
    API_CHK(offsetof(RHI_VertexAttrib, mLocation) == offsetof(VertexAttrib, mLocation));
    API_CHK(offsetof(RHI_VertexAttrib, mOffset) == offsetof(VertexAttrib, mOffset));
    API_CHK(offsetof(RHI_VertexAttrib, mRate) == offsetof(VertexAttrib, mRate));
    API_CHK(sizeof(RHI_VertexLayout) == sizeof(VertexLayout));
    API_CHK(offsetof(RHI_VertexLayout, mAttribCount) == offsetof(VertexLayout, mAttribCount));
    API_CHK(offsetof(RHI_VertexLayout, mAttribs) == offsetof(VertexLayout, mAttribs));
    API_CHK(sizeof(RHI_RaytracingPipelineDesc) == sizeof(RaytracingPipelineDesc));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, pRaytracing) == offsetof(RaytracingPipelineDesc, pRaytracing));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, pGlobalRootSignature) == offsetof(RaytracingPipelineDesc, pGlobalRootSignature));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, pRayGenShader) == offsetof(RaytracingPipelineDesc, pRayGenShader));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, pRayGenRootSignature) == offsetof(RaytracingPipelineDesc, pRayGenRootSignature));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, ppMissShaders) == offsetof(RaytracingPipelineDesc, ppMissShaders));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, ppMissRootSignatures) == offsetof(RaytracingPipelineDesc, ppMissRootSignatures));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, pHitGroups) == offsetof(RaytracingPipelineDesc, pHitGroups));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, pEmptyRootSignature) == offsetof(RaytracingPipelineDesc, pEmptyRootSignature));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, mMissShaderCount) == offsetof(RaytracingPipelineDesc, mMissShaderCount));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, mHitGroupCount) == offsetof(RaytracingPipelineDesc, mHitGroupCount));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, mPayloadSize) == offsetof(RaytracingPipelineDesc, mPayloadSize));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, mAttributeSize) == offsetof(RaytracingPipelineDesc, mAttributeSize));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, mMaxTraceRecursionDepth) == offsetof(RaytracingPipelineDesc, mMaxTraceRecursionDepth));
    API_CHK(offsetof(RHI_RaytracingPipelineDesc, mMaxRaysCount) == offsetof(RaytracingPipelineDesc, mMaxRaysCount));
    API_CHK(sizeof(RHI_GraphicsPipelineDesc) == sizeof(GraphicsPipelineDesc));
    API_CHK(offsetof(RHI_GraphicsPipelineDesc, pShaderProgram) == offsetof(GraphicsPipelineDesc, pShaderProgram));
    API_CHK(offsetof(RHI_GraphicsPipelineDesc, pRootSignature) == offsetof(GraphicsPipelineDesc, pRootSignature));
    API_CHK(offsetof(RHI_GraphicsPipelineDesc, pVertexLayout) == offsetof(GraphicsPipelineDesc, pVertexLayout));
    API_CHK(offsetof(RHI_GraphicsPipelineDesc, pBlendState) == offsetof(GraphicsPipelineDesc, pBlendState));
    API_CHK(offsetof(RHI_GraphicsPipelineDesc, pDepthState) == offsetof(GraphicsPipelineDesc, pDepthState));
    API_CHK(offsetof(RHI_GraphicsPipelineDesc, pRasterizerState) == offsetof(GraphicsPipelineDesc, pRasterizerState));
    API_CHK(offsetof(RHI_GraphicsPipelineDesc, pColorFormats) == offsetof(GraphicsPipelineDesc, pColorFormats));
    API_CHK(offsetof(RHI_GraphicsPipelineDesc, mRenderTargetCount) == offsetof(GraphicsPipelineDesc, mRenderTargetCount));
    API_CHK(offsetof(RHI_GraphicsPipelineDesc, mSampleCount) == offsetof(GraphicsPipelineDesc, mSampleCount));
    API_CHK(offsetof(RHI_GraphicsPipelineDesc, mSampleQuality) == offsetof(GraphicsPipelineDesc, mSampleQuality));
    API_CHK(offsetof(RHI_GraphicsPipelineDesc, mDepthStencilFormat) == offsetof(GraphicsPipelineDesc, mDepthStencilFormat));
    API_CHK(offsetof(RHI_GraphicsPipelineDesc, mPrimitiveTopo) == offsetof(GraphicsPipelineDesc, mPrimitiveTopo));
    API_CHK(offsetof(RHI_GraphicsPipelineDesc, mSupportIndirectCommandBuffer) == offsetof(GraphicsPipelineDesc, mSupportIndirectCommandBuffer));
    API_CHK(sizeof(RHI_ComputePipelineDesc) == sizeof(ComputePipelineDesc));
    API_CHK(offsetof(RHI_ComputePipelineDesc, pShaderProgram) == offsetof(ComputePipelineDesc, pShaderProgram));
    API_CHK(offsetof(RHI_ComputePipelineDesc, pRootSignature) == offsetof(ComputePipelineDesc, pRootSignature));
    API_CHK(sizeof(RHI_PipelineDesc) == sizeof(PipelineDesc));
    API_CHK(offsetof(RHI_PipelineDesc, mType) == offsetof(PipelineDesc, mType));
    API_CHK(offsetof(RHI_PipelineDesc, pCache) == offsetof(PipelineDesc, pCache));
    API_CHK(offsetof(RHI_PipelineDesc, pPipelineExtensions) == offsetof(PipelineDesc, pPipelineExtensions));
    API_CHK(offsetof(RHI_PipelineDesc, mExtensionCount) == offsetof(PipelineDesc, mExtensionCount));
    API_CHK(offsetof(RHI_PipelineDesc, pName) == offsetof(PipelineDesc, pName));
    API_CHK(sizeof(RHI_PipelineCacheDesc) == sizeof(PipelineCacheDesc));
    API_CHK(offsetof(RHI_PipelineCacheDesc, pData) == offsetof(PipelineCacheDesc, pData));
    API_CHK(offsetof(RHI_PipelineCacheDesc, mSize) == offsetof(PipelineCacheDesc, mSize));
    API_CHK(offsetof(RHI_PipelineCacheDesc, mFlags) == offsetof(PipelineCacheDesc, mFlags));
    API_CHK(sizeof(RHI_RendererDesc) == sizeof(RendererDesc));
    API_CHK(offsetof(RHI_RendererDesc, pLogFn) == offsetof(RendererDesc, pLogFn));
    API_CHK(offsetof(RHI_RendererDesc, mApi) == offsetof(RendererDesc, mApi));
    API_CHK(offsetof(RHI_RendererDesc, mShaderTarget) == offsetof(RendererDesc, mShaderTarget));
    API_CHK(offsetof(RHI_RendererDesc, mGpuMode) == offsetof(RendererDesc, mGpuMode));
#if defined(VULKAN)
    API_CHK(offsetof(RHI_RendererDesc, ppInstanceLayers) == offsetof(RendererDesc, ppInstanceLayers));
#endif // defined(VULKAN)
#if defined(VULKAN)
    API_CHK(offsetof(RHI_RendererDesc, ppInstanceExtensions) == offsetof(RendererDesc, ppInstanceExtensions));
#endif // defined(VULKAN)
#if defined(VULKAN)
    API_CHK(offsetof(RHI_RendererDesc, ppDeviceExtensions) == offsetof(RendererDesc, ppDeviceExtensions));
#endif // defined(VULKAN)
#if defined(VULKAN)
    API_CHK(offsetof(RHI_RendererDesc, mInstanceLayerCount) == offsetof(RendererDesc, mInstanceLayerCount));
#endif // defined(VULKAN)
#if defined(VULKAN)
    API_CHK(offsetof(RHI_RendererDesc, mInstanceExtensionCount) == offsetof(RendererDesc, mInstanceExtensionCount));
#endif // defined(VULKAN)
#if defined(VULKAN)
    API_CHK(offsetof(RHI_RendererDesc, mDeviceExtensionCount) == offsetof(RendererDesc, mDeviceExtensionCount));
#endif // defined(VULKAN)
#if defined(VULKAN)
    API_CHK(offsetof(RHI_RendererDesc, mRequestAllAvailableQueues) == offsetof(RendererDesc, mRequestAllAvailableQueues));
#endif // defined(VULKAN)
#if defined(DIRECT3D12) || defined(DIRECT3D11)
    API_CHK(offsetof(RHI_RendererDesc, mDxFeatureLevel) == offsetof(RendererDesc, mDxFeatureLevel));
#endif // defined(DIRECT3D12) || defined(DIRECT3D11)
    API_CHK(offsetof(RHI_RendererDesc, mEnableGPUBasedValidation) == offsetof(RendererDesc, mEnableGPUBasedValidation));
    API_CHK(sizeof(RHI_GPUVendorPreset) == sizeof(GPUVendorPreset));
    API_CHK(offsetof(RHI_GPUVendorPreset, mVendorId) == offsetof(GPUVendorPreset, mVendorId));
    API_CHK(offsetof(RHI_GPUVendorPreset, mModelId) == offsetof(GPUVendorPreset, mModelId));
    API_CHK(offsetof(RHI_GPUVendorPreset, mRevisionId) == offsetof(GPUVendorPreset, mRevisionId));
    API_CHK(offsetof(RHI_GPUVendorPreset, mPresetLevel) == offsetof(GPUVendorPreset, mPresetLevel));
    API_CHK(offsetof(RHI_GPUVendorPreset, mGpuName) == offsetof(GPUVendorPreset, mGpuName));
    API_CHK(offsetof(RHI_GPUVendorPreset, mGpuDriverVersion) == offsetof(GPUVendorPreset, mGpuDriverVersion));
    API_CHK(offsetof(RHI_GPUVendorPreset, mGpuDriverDate) == offsetof(GPUVendorPreset, mGpuDriverDate));
    API_CHK(sizeof(RHI_GPUCapBits) == sizeof(GPUCapBits));
    API_CHK(offsetof(RHI_GPUCapBits, canShaderReadFrom) == offsetof(GPUCapBits, canShaderReadFrom));
    API_CHK(offsetof(RHI_GPUCapBits, canShaderWriteTo) == offsetof(GPUCapBits, canShaderWriteTo));
    API_CHK(offsetof(RHI_GPUCapBits, canRenderTargetWriteTo) == offsetof(GPUCapBits, canRenderTargetWriteTo));
    API_CHK(sizeof(RHI_GPUSettings) == sizeof(GPUSettings));
    API_CHK(offsetof(RHI_GPUSettings, mUniformBufferAlignment) == offsetof(GPUSettings, mUniformBufferAlignment));
    API_CHK(offsetof(RHI_GPUSettings, mUploadBufferTextureAlignment) == offsetof(GPUSettings, mUploadBufferTextureAlignment));
    API_CHK(offsetof(RHI_GPUSettings, mUploadBufferTextureRowAlignment) == offsetof(GPUSettings, mUploadBufferTextureRowAlignment));
    API_CHK(offsetof(RHI_GPUSettings, mMaxVertexInputBindings) == offsetof(GPUSettings, mMaxVertexInputBindings));
    API_CHK(offsetof(RHI_GPUSettings, mMaxRootSignatureDWORDS) == offsetof(GPUSettings, mMaxRootSignatureDWORDS));
    API_CHK(offsetof(RHI_GPUSettings, mWaveLaneCount) == offsetof(GPUSettings, mWaveLaneCount));
    API_CHK(offsetof(RHI_GPUSettings, mWaveOpsSupportFlags) == offsetof(GPUSettings, mWaveOpsSupportFlags));
    API_CHK(offsetof(RHI_GPUSettings, mGpuVendorPreset) == offsetof(GPUSettings, mGpuVendorPreset));
#if defined(METAL)
    API_CHK(offsetof(RHI_GPUSettings, mArgumentBufferMaxTextures) == offsetof(GPUSettings, mArgumentBufferMaxTextures));
#endif // defined(METAL)
    API_CHK(sizeof(RHI_IndirectArgumentDescriptor) == sizeof(IndirectArgumentDescriptor));
    API_CHK(offsetof(RHI_IndirectArgumentDescriptor, mType) == offsetof(IndirectArgumentDescriptor, mType));
    API_CHK(offsetof(RHI_IndirectArgumentDescriptor, pName) == offsetof(IndirectArgumentDescriptor, pName));
    API_CHK(offsetof(RHI_IndirectArgumentDescriptor, mIndex) == offsetof(IndirectArgumentDescriptor, mIndex));
    API_CHK(sizeof(RHI_CommandSignatureDesc) == sizeof(CommandSignatureDesc));
    API_CHK(offsetof(RHI_CommandSignatureDesc, pRootSignature) == offsetof(CommandSignatureDesc, pRootSignature));
    API_CHK(offsetof(RHI_CommandSignatureDesc, mIndirectArgCount) == offsetof(CommandSignatureDesc, mIndirectArgCount));
    API_CHK(offsetof(RHI_CommandSignatureDesc, pArgDescs) == offsetof(CommandSignatureDesc, pArgDescs));
    API_CHK(offsetof(RHI_CommandSignatureDesc, mPacked) == offsetof(CommandSignatureDesc, mPacked));
    API_CHK(sizeof(RHI_DescriptorSetDesc) == sizeof(DescriptorSetDesc));
    API_CHK(offsetof(RHI_DescriptorSetDesc, pRootSignature) == offsetof(DescriptorSetDesc, pRootSignature));
    API_CHK(offsetof(RHI_DescriptorSetDesc, mUpdateFrequency) == offsetof(DescriptorSetDesc, mUpdateFrequency));
    API_CHK(offsetof(RHI_DescriptorSetDesc, mMaxSets) == offsetof(DescriptorSetDesc, mMaxSets));
    API_CHK(offsetof(RHI_DescriptorSetDesc, mNodeIndex) == offsetof(DescriptorSetDesc, mNodeIndex));
    API_CHK(sizeof(RHI_QueueSubmitDesc) == sizeof(QueueSubmitDesc));
    API_CHK(offsetof(RHI_QueueSubmitDesc, mCmdCount) == offsetof(QueueSubmitDesc, mCmdCount));
    API_CHK(offsetof(RHI_QueueSubmitDesc, ppCmds) == offsetof(QueueSubmitDesc, ppCmds));
    API_CHK(offsetof(RHI_QueueSubmitDesc, pSignalFence) == offsetof(QueueSubmitDesc, pSignalFence));
    API_CHK(offsetof(RHI_QueueSubmitDesc, mWaitSemaphoreCount) == offsetof(QueueSubmitDesc, mWaitSemaphoreCount));
    API_CHK(offsetof(RHI_QueueSubmitDesc, ppWaitSemaphores) == offsetof(QueueSubmitDesc, ppWaitSemaphores));
    API_CHK(offsetof(RHI_QueueSubmitDesc, mSignalSemaphoreCount) == offsetof(QueueSubmitDesc, mSignalSemaphoreCount));
    API_CHK(offsetof(RHI_QueueSubmitDesc, ppSignalSemaphores) == offsetof(QueueSubmitDesc, ppSignalSemaphores));
    API_CHK(offsetof(RHI_QueueSubmitDesc, mSubmitDone) == offsetof(QueueSubmitDesc, mSubmitDone));
    API_CHK(sizeof(RHI_QueuePresentDesc) == sizeof(QueuePresentDesc));
    API_CHK(offsetof(RHI_QueuePresentDesc, pSwapChain) == offsetof(QueuePresentDesc, pSwapChain));
    API_CHK(offsetof(RHI_QueuePresentDesc, mWaitSemaphoreCount) == offsetof(QueuePresentDesc, mWaitSemaphoreCount));
    API_CHK(offsetof(RHI_QueuePresentDesc, ppWaitSemaphores) == offsetof(QueuePresentDesc, ppWaitSemaphores));
    API_CHK(offsetof(RHI_QueuePresentDesc, mIndex) == offsetof(QueuePresentDesc, mIndex));
    API_CHK(offsetof(RHI_QueuePresentDesc, mSubmitDone) == offsetof(QueuePresentDesc, mSubmitDone));
    API_CHK(sizeof(RHI_MappedMemoryRange) == sizeof(MappedMemoryRange));
    API_CHK(offsetof(RHI_MappedMemoryRange, pData) == offsetof(MappedMemoryRange, pData));
    API_CHK(offsetof(RHI_MappedMemoryRange, pBuffer) == offsetof(MappedMemoryRange, pBuffer));
    API_CHK(offsetof(RHI_MappedMemoryRange, mOffset) == offsetof(MappedMemoryRange, mOffset));
    API_CHK(offsetof(RHI_MappedMemoryRange, mSize) == offsetof(MappedMemoryRange, mSize));
    API_CHK(offsetof(RHI_MappedMemoryRange, mFlags) == offsetof(MappedMemoryRange, mFlags));
    API_CHK(sizeof(RHI_BufferLoadDesc) == sizeof(BufferLoadDesc));
    API_CHK(offsetof(RHI_BufferLoadDesc, ppBuffer) == offsetof(BufferLoadDesc, ppBuffer));
    API_CHK(offsetof(RHI_BufferLoadDesc, pData) == offsetof(BufferLoadDesc, pData));
    API_CHK(offsetof(RHI_BufferLoadDesc, mDesc) == offsetof(BufferLoadDesc, mDesc));
    API_CHK(offsetof(RHI_BufferLoadDesc, mForceReset) == offsetof(BufferLoadDesc, mForceReset));
    API_CHK(sizeof(RHI_TextureLoadDesc) == sizeof(TextureLoadDesc));
    API_CHK(offsetof(RHI_TextureLoadDesc, ppTexture) == offsetof(TextureLoadDesc, ppTexture));
    API_CHK(offsetof(RHI_TextureLoadDesc, pDesc) == offsetof(TextureLoadDesc, pDesc));
    API_CHK(offsetof(RHI_TextureLoadDesc, pFileName) == offsetof(TextureLoadDesc, pFileName));
    API_CHK(offsetof(RHI_TextureLoadDesc, mNodeIndex) == offsetof(TextureLoadDesc, mNodeIndex));
    API_CHK(offsetof(RHI_TextureLoadDesc, mCreationFlag) == offsetof(TextureLoadDesc, mCreationFlag));
    API_CHK(offsetof(RHI_TextureLoadDesc, mContainer) == offsetof(TextureLoadDesc, mContainer));
    API_CHK(sizeof(RHI_GeometryLoadDesc) == sizeof(GeometryLoadDesc));
    API_CHK(offsetof(RHI_GeometryLoadDesc, ppGeometry) == offsetof(GeometryLoadDesc, ppGeometry));
    API_CHK(offsetof(RHI_GeometryLoadDesc, pFileName) == offsetof(GeometryLoadDesc, pFileName));
    API_CHK(offsetof(RHI_GeometryLoadDesc, mFlags) == offsetof(GeometryLoadDesc, mFlags));
    API_CHK(offsetof(RHI_GeometryLoadDesc, mNodeIndex) == offsetof(GeometryLoadDesc, mNodeIndex));
    API_CHK(offsetof(RHI_GeometryLoadDesc, pVertexLayout) == offsetof(GeometryLoadDesc, pVertexLayout));
    API_CHK(sizeof(RHI_VirtualTexturePageInfo) == sizeof(VirtualTexturePageInfo));
    API_CHK(offsetof(RHI_VirtualTexturePageInfo, pageAlive) == offsetof(VirtualTexturePageInfo, pageAlive));
    API_CHK(offsetof(RHI_VirtualTexturePageInfo, TexID) == offsetof(VirtualTexturePageInfo, TexID));
    API_CHK(offsetof(RHI_VirtualTexturePageInfo, mipLevel) == offsetof(VirtualTexturePageInfo, mipLevel));
    API_CHK(offsetof(RHI_VirtualTexturePageInfo, padding1) == offsetof(VirtualTexturePageInfo, padding1));
    API_CHK(sizeof(RHI_BufferUpdateDesc) == sizeof(BufferUpdateDesc));
    API_CHK(offsetof(RHI_BufferUpdateDesc, pBuffer) == offsetof(BufferUpdateDesc, pBuffer));
    API_CHK(offsetof(RHI_BufferUpdateDesc, mDstOffset) == offsetof(BufferUpdateDesc, mDstOffset));
    API_CHK(offsetof(RHI_BufferUpdateDesc, mSize) == offsetof(BufferUpdateDesc, mSize));
    API_CHK(offsetof(RHI_BufferUpdateDesc, pMappedData) == offsetof(BufferUpdateDesc, pMappedData));
    API_CHK(offsetof(RHI_BufferUpdateDesc, mInternal) == offsetof(BufferUpdateDesc, mInternal));
    API_CHK(sizeof(RHI_TextureUpdateDesc) == sizeof(TextureUpdateDesc));
    API_CHK(offsetof(RHI_TextureUpdateDesc, pTexture) == offsetof(TextureUpdateDesc, pTexture));
    API_CHK(offsetof(RHI_TextureUpdateDesc, mMipLevel) == offsetof(TextureUpdateDesc, mMipLevel));
    API_CHK(offsetof(RHI_TextureUpdateDesc, mArrayLayer) == offsetof(TextureUpdateDesc, mArrayLayer));
    API_CHK(offsetof(RHI_TextureUpdateDesc, pMappedData) == offsetof(TextureUpdateDesc, pMappedData));
    API_CHK(offsetof(RHI_TextureUpdateDesc, mDstRowStride) == offsetof(TextureUpdateDesc, mDstRowStride));
    API_CHK(offsetof(RHI_TextureUpdateDesc, mRowCount) == offsetof(TextureUpdateDesc, mRowCount));
    API_CHK(offsetof(RHI_TextureUpdateDesc, mSrcRowStride) == offsetof(TextureUpdateDesc, mSrcRowStride));
    API_CHK(offsetof(RHI_TextureUpdateDesc, mDstSliceStride) == offsetof(TextureUpdateDesc, mDstSliceStride));
    API_CHK(offsetof(RHI_TextureUpdateDesc, mSrcSliceStride) == offsetof(TextureUpdateDesc, mSrcSliceStride));
    API_CHK(offsetof(RHI_TextureUpdateDesc, mInternal) == offsetof(TextureUpdateDesc, mInternal));
    API_CHK(sizeof(RHI_ShaderStageLoadDesc) == sizeof(ShaderStageLoadDesc));
    API_CHK(offsetof(RHI_ShaderStageLoadDesc, pFileName) == offsetof(ShaderStageLoadDesc, pFileName));
    API_CHK(offsetof(RHI_ShaderStageLoadDesc, pMacros) == offsetof(ShaderStageLoadDesc, pMacros));
    API_CHK(offsetof(RHI_ShaderStageLoadDesc, mMacroCount) == offsetof(ShaderStageLoadDesc, mMacroCount));
    API_CHK(offsetof(RHI_ShaderStageLoadDesc, pEntryPointName) == offsetof(ShaderStageLoadDesc, pEntryPointName));
    API_CHK(offsetof(RHI_ShaderStageLoadDesc, mFlags) == offsetof(ShaderStageLoadDesc, mFlags));
    API_CHK(sizeof(RHI_ShaderLoadDesc) == sizeof(ShaderLoadDesc));
    API_CHK(offsetof(RHI_ShaderLoadDesc, mStages) == offsetof(ShaderLoadDesc, mStages));
    API_CHK(offsetof(RHI_ShaderLoadDesc, mTarget) == offsetof(ShaderLoadDesc, mTarget));
    API_CHK(sizeof(RHI_PipelineCacheLoadDesc) == sizeof(PipelineCacheLoadDesc));
    API_CHK(offsetof(RHI_PipelineCacheLoadDesc, pFileName) == offsetof(PipelineCacheLoadDesc, pFileName));
    API_CHK(offsetof(RHI_PipelineCacheLoadDesc, mFlags) == offsetof(PipelineCacheLoadDesc, mFlags));
    API_CHK(sizeof(RHI_PipelineCacheSaveDesc) == sizeof(PipelineCacheSaveDesc));
    API_CHK(offsetof(RHI_PipelineCacheSaveDesc, pFileName) == offsetof(PipelineCacheSaveDesc, pFileName));
    API_CHK(sizeof(RHI_ResourceLoaderDesc) == sizeof(ResourceLoaderDesc));
    API_CHK(offsetof(RHI_ResourceLoaderDesc, mBufferSize) == offsetof(ResourceLoaderDesc, mBufferSize));
    API_CHK(offsetof(RHI_ResourceLoaderDesc, mBufferCount) == offsetof(ResourceLoaderDesc, mBufferCount));
    API_CHK(sizeof(RHI_AccelerationStructureInstanceDesc) == sizeof(AccelerationStructureInstanceDesc));
    API_CHK(offsetof(RHI_AccelerationStructureInstanceDesc, mAccelerationStructureIndex) == offsetof(AccelerationStructureInstanceDesc, mAccelerationStructureIndex));
    API_CHK(offsetof(RHI_AccelerationStructureInstanceDesc, mTransform) == offsetof(AccelerationStructureInstanceDesc, mTransform));
    API_CHK(offsetof(RHI_AccelerationStructureInstanceDesc, mInstanceID) == offsetof(AccelerationStructureInstanceDesc, mInstanceID));
    API_CHK(offsetof(RHI_AccelerationStructureInstanceDesc, mInstanceMask) == offsetof(AccelerationStructureInstanceDesc, mInstanceMask));
    API_CHK(offsetof(RHI_AccelerationStructureInstanceDesc, mInstanceContributionToHitGroupIndex) == offsetof(AccelerationStructureInstanceDesc, mInstanceContributionToHitGroupIndex));
    API_CHK(offsetof(RHI_AccelerationStructureInstanceDesc, mFlags) == offsetof(AccelerationStructureInstanceDesc, mFlags));
    API_CHK(sizeof(RHI_AccelerationStructureGeometryDesc) == sizeof(AccelerationStructureGeometryDesc));
    API_CHK(offsetof(RHI_AccelerationStructureGeometryDesc, mFlags) == offsetof(AccelerationStructureGeometryDesc, mFlags));
    API_CHK(offsetof(RHI_AccelerationStructureGeometryDesc, pVertexArray) == offsetof(AccelerationStructureGeometryDesc, pVertexArray));
    API_CHK(offsetof(RHI_AccelerationStructureGeometryDesc, mVertexCount) == offsetof(AccelerationStructureGeometryDesc, mVertexCount));
    API_CHK(offsetof(RHI_AccelerationStructureGeometryDesc, mIndexCount) == offsetof(AccelerationStructureGeometryDesc, mIndexCount));
    API_CHK(offsetof(RHI_AccelerationStructureGeometryDesc, mIndexType) == offsetof(AccelerationStructureGeometryDesc, mIndexType));
    API_CHK(sizeof(RHI_AccelerationStructureDescBottom) == sizeof(AccelerationStructureDescBottom));
    API_CHK(offsetof(RHI_AccelerationStructureDescBottom, mFlags) == offsetof(AccelerationStructureDescBottom, mFlags));
    API_CHK(offsetof(RHI_AccelerationStructureDescBottom, mDescCount) == offsetof(AccelerationStructureDescBottom, mDescCount));
    API_CHK(offsetof(RHI_AccelerationStructureDescBottom, pGeometryDescs) == offsetof(AccelerationStructureDescBottom, pGeometryDescs));
    API_CHK(sizeof(RHI_AccelerationStructureDescTop) == sizeof(AccelerationStructureDescTop));
    API_CHK(offsetof(RHI_AccelerationStructureDescTop, mFlags) == offsetof(AccelerationStructureDescTop, mFlags));
    API_CHK(offsetof(RHI_AccelerationStructureDescTop, mInstancesDescCount) == offsetof(AccelerationStructureDescTop, mInstancesDescCount));
    API_CHK(offsetof(RHI_AccelerationStructureDescTop, pInstanceDescs) == offsetof(AccelerationStructureDescTop, pInstanceDescs));
    API_CHK(offsetof(RHI_AccelerationStructureDescTop, mBottomASDesc) == offsetof(AccelerationStructureDescTop, mBottomASDesc));
    API_CHK(offsetof(RHI_AccelerationStructureDescTop, mIndexType) == offsetof(AccelerationStructureDescTop, mIndexType));
    API_CHK(sizeof(RHI_RaytracingShaderTableDesc) == sizeof(RaytracingShaderTableDesc));
    API_CHK(offsetof(RHI_RaytracingShaderTableDesc, pPipeline) == offsetof(RaytracingShaderTableDesc, pPipeline));
    API_CHK(offsetof(RHI_RaytracingShaderTableDesc, pGlobalRootSignature) == offsetof(RaytracingShaderTableDesc, pGlobalRootSignature));
    API_CHK(offsetof(RHI_RaytracingShaderTableDesc, pRayGenShader) == offsetof(RaytracingShaderTableDesc, pRayGenShader));
    API_CHK(offsetof(RHI_RaytracingShaderTableDesc, pMissShaders) == offsetof(RaytracingShaderTableDesc, pMissShaders));
    API_CHK(offsetof(RHI_RaytracingShaderTableDesc, pHitGroups) == offsetof(RaytracingShaderTableDesc, pHitGroups));
    API_CHK(offsetof(RHI_RaytracingShaderTableDesc, mMissShaderCount) == offsetof(RaytracingShaderTableDesc, mMissShaderCount));
    API_CHK(offsetof(RHI_RaytracingShaderTableDesc, mHitGroupCount) == offsetof(RaytracingShaderTableDesc, mHitGroupCount));
    API_CHK(sizeof(RHI_RaytracingDispatchDesc) == sizeof(RaytracingDispatchDesc));
    API_CHK(offsetof(RHI_RaytracingDispatchDesc, mWidth) == offsetof(RaytracingDispatchDesc, mWidth));
    API_CHK(offsetof(RHI_RaytracingDispatchDesc, mHeight) == offsetof(RaytracingDispatchDesc, mHeight));
    API_CHK(offsetof(RHI_RaytracingDispatchDesc, pShaderTable) == offsetof(RaytracingDispatchDesc, pShaderTable));
#if defined(METAL)
    API_CHK(offsetof(RHI_RaytracingDispatchDesc, pTopLevelAccelerationStructure) == offsetof(RaytracingDispatchDesc, pTopLevelAccelerationStructure));
#endif // defined(METAL)
#if defined(METAL)
    API_CHK(offsetof(RHI_RaytracingDispatchDesc, pSets) == offsetof(RaytracingDispatchDesc, pSets));
#endif // defined(METAL)
#if defined(METAL)
    API_CHK(offsetof(RHI_RaytracingDispatchDesc, pIndexes) == offsetof(RaytracingDispatchDesc, pIndexes));
#endif // defined(METAL)
    API_CHK(sizeof(RHI_RaytracingBuildASDesc) == sizeof(RaytracingBuildASDesc));
    API_CHK(offsetof(RHI_RaytracingBuildASDesc, ppAccelerationStructures) == offsetof(RaytracingBuildASDesc, ppAccelerationStructures));
    API_CHK(offsetof(RHI_RaytracingBuildASDesc, mCount) == offsetof(RaytracingBuildASDesc, mCount));
    API_CHK(offsetof(RHI_RaytracingBuildASDesc, mBottomASIndicesCount) == offsetof(RaytracingBuildASDesc, mBottomASIndicesCount));
    API_CHK(offsetof(RHI_RaytracingBuildASDesc, pBottomASIndices) == offsetof(RaytracingBuildASDesc, pBottomASIndices));
    API_CHK(sizeof(RHI_VertexInput) == sizeof(VertexInput));
    API_CHK(offsetof(RHI_VertexInput, size) == offsetof(VertexInput, size));
    API_CHK(offsetof(RHI_VertexInput, name) == offsetof(VertexInput, name));
    API_CHK(offsetof(RHI_VertexInput, name_size) == offsetof(VertexInput, name_size));
    API_CHK(sizeof(RHI_ShaderResource) == sizeof(ShaderResource));
    API_CHK(offsetof(RHI_ShaderResource, type) == offsetof(ShaderResource, type));
    API_CHK(offsetof(RHI_ShaderResource, set) == offsetof(ShaderResource, set));
    API_CHK(offsetof(RHI_ShaderResource, reg) == offsetof(ShaderResource, reg));
    API_CHK(offsetof(RHI_ShaderResource, size) == offsetof(ShaderResource, size));
    API_CHK(offsetof(RHI_ShaderResource, used_stages) == offsetof(ShaderResource, used_stages));
    API_CHK(offsetof(RHI_ShaderResource, name) == offsetof(ShaderResource, name));
    API_CHK(offsetof(RHI_ShaderResource, name_size) == offsetof(ShaderResource, name_size));
    API_CHK(offsetof(RHI_ShaderResource, dim) == offsetof(ShaderResource, dim));
#if defined(METAL)
    API_CHK(offsetof(RHI_ShaderResource, alignment) == offsetof(ShaderResource, alignment));
#endif // defined(METAL)
#if defined(METAL)
    API_CHK(offsetof(RHI_ShaderResource, mtlTextureType) == offsetof(ShaderResource, mtlTextureType));
#endif // defined(METAL)
#if defined(METAL)
    API_CHK(offsetof(RHI_ShaderResource, mIsArgumentBufferField) == offsetof(ShaderResource, mIsArgumentBufferField));
#endif // defined(METAL)
#if defined(METAL)
    API_CHK(offsetof(RHI_ShaderResource, mtlArgumentDescriptors) == offsetof(ShaderResource, mtlArgumentDescriptors));
#endif // defined(METAL)
    API_CHK(sizeof(RHI_ShaderVariable) == sizeof(ShaderVariable));
    API_CHK(offsetof(RHI_ShaderVariable, parent_index) == offsetof(ShaderVariable, parent_index));
    API_CHK(offsetof(RHI_ShaderVariable, offset) == offsetof(ShaderVariable, offset));
    API_CHK(offsetof(RHI_ShaderVariable, size) == offsetof(ShaderVariable, size));
    API_CHK(offsetof(RHI_ShaderVariable, name) == offsetof(ShaderVariable, name));
    API_CHK(offsetof(RHI_ShaderVariable, name_size) == offsetof(ShaderVariable, name_size));
    API_CHK(sizeof(RHI_ShaderReflection) == sizeof(ShaderReflection));
    API_CHK(offsetof(RHI_ShaderReflection, mShaderStage) == offsetof(ShaderReflection, mShaderStage));
    API_CHK(offsetof(RHI_ShaderReflection, pNamePool) == offsetof(ShaderReflection, pNamePool));
    API_CHK(offsetof(RHI_ShaderReflection, mNamePoolSize) == offsetof(ShaderReflection, mNamePoolSize));
    API_CHK(offsetof(RHI_ShaderReflection, pVertexInputs) == offsetof(ShaderReflection, pVertexInputs));
    API_CHK(offsetof(RHI_ShaderReflection, mVertexInputsCount) == offsetof(ShaderReflection, mVertexInputsCount));
    API_CHK(offsetof(RHI_ShaderReflection, pShaderResources) == offsetof(ShaderReflection, pShaderResources));
    API_CHK(offsetof(RHI_ShaderReflection, mShaderResourceCount) == offsetof(ShaderReflection, mShaderResourceCount));
    API_CHK(offsetof(RHI_ShaderReflection, pVariables) == offsetof(ShaderReflection, pVariables));
    API_CHK(offsetof(RHI_ShaderReflection, mVariableCount) == offsetof(ShaderReflection, mVariableCount));
    API_CHK(offsetof(RHI_ShaderReflection, mNumThreadsPerGroup) == offsetof(ShaderReflection, mNumThreadsPerGroup));
    API_CHK(offsetof(RHI_ShaderReflection, mNumControlPoint) == offsetof(ShaderReflection, mNumControlPoint));
    API_CHK(offsetof(RHI_ShaderReflection, pEntryPoint) == offsetof(ShaderReflection, pEntryPoint));
    API_CHK(sizeof(RHI_PipelineReflection) == sizeof(PipelineReflection));
    API_CHK(offsetof(RHI_PipelineReflection, mShaderStages) == offsetof(PipelineReflection, mShaderStages));
    API_CHK(offsetof(RHI_PipelineReflection, mStageReflections) == offsetof(PipelineReflection, mStageReflections));
    API_CHK(offsetof(RHI_PipelineReflection, mStageReflectionCount) == offsetof(PipelineReflection, mStageReflectionCount));
    API_CHK(offsetof(RHI_PipelineReflection, mVertexStageIndex) == offsetof(PipelineReflection, mVertexStageIndex));
    API_CHK(offsetof(RHI_PipelineReflection, mHullStageIndex) == offsetof(PipelineReflection, mHullStageIndex));
    API_CHK(offsetof(RHI_PipelineReflection, mDomainStageIndex) == offsetof(PipelineReflection, mDomainStageIndex));
    API_CHK(offsetof(RHI_PipelineReflection, mGeometryStageIndex) == offsetof(PipelineReflection, mGeometryStageIndex));
    API_CHK(offsetof(RHI_PipelineReflection, mPixelStageIndex) == offsetof(PipelineReflection, mPixelStageIndex));
    API_CHK(offsetof(RHI_PipelineReflection, pShaderResources) == offsetof(PipelineReflection, pShaderResources));
    API_CHK(offsetof(RHI_PipelineReflection, mShaderResourceCount) == offsetof(PipelineReflection, mShaderResourceCount));
    API_CHK(offsetof(RHI_PipelineReflection, pVariables) == offsetof(PipelineReflection, pVariables));
    API_CHK(offsetof(RHI_PipelineReflection, mVariableCount) == offsetof(PipelineReflection, mVariableCount));

}
#undef API_CHK

#else // !defined(RHI_SKIP_DECLARATIONS)

#ifdef _MSC_VER
#  define snprintf _snprintf
#  define popen _popen
#  define pclose _pclose
#  define _CRT_SECURE_NO_WARNINGS
#endif

#ifdef _MSC_VER
#  define snprintf _snprintf
#  define popen _popen
#  define pclose _pclose
#  define _CRT_SECURE_NO_WARNINGS
#endif

#include <assert.h>
#include <stdio.h>
#include <string.h>
#include <sys/stat.h>

#ifdef _WIN32
#  define WIN32_LEAN_AND_MEAN
#  define VC_EXTRALEAN
#  include <windows.h>

/* Utility macros. */

typedef HMODULE DynamicLibrary;

#  define dynamic_library_open(path)         LoadLibrary(path)
#  define dynamic_library_close(lib)         FreeLibrary(lib)
#  define dynamic_library_find(lib, symbol)  GetProcAddress(lib, symbol)
#else
#  include <dlfcn.h>

typedef void* DynamicLibrary;

#  define dynamic_library_open(path)         dlopen(path, RTLD_NOW)
#  define dynamic_library_close(lib)         dlclose(lib)
#  define dynamic_library_find(lib, symbol)  dlsym(lib, symbol)
#endif

#define DLL_LIBRARY_FIND_CHECKED(name)         name = (t##name *)dynamic_library_find(lib, #name);         assert(name);

#define DLL_LIBRARY_FIND(name)         name = (t##name *)dynamic_library_find(lib, #name);

static DynamicLibrary lib;

#define DLL_FUNC(name) t##name *##name;

#define DLL_FUNCS() \
    DLL_FUNC(RHI_initRenderer); \
    DLL_FUNC(RHI_removeRenderer); \
    DLL_FUNC(RHI_addFence); \
    DLL_FUNC(RHI_removeFence); \
    DLL_FUNC(RHI_addSemaphore); \
    DLL_FUNC(RHI_removeSemaphore); \
    DLL_FUNC(RHI_addQueue); \
    DLL_FUNC(RHI_removeQueue); \
    DLL_FUNC(RHI_addSwapChain); \
    DLL_FUNC(RHI_removeSwapChain); \
    DLL_FUNC(RHI_addCmdPool); \
    DLL_FUNC(RHI_removeCmdPool); \
    DLL_FUNC(RHI_addCmd); \
    DLL_FUNC(RHI_removeCmd); \
    DLL_FUNC(RHI_addCmd_n); \
    DLL_FUNC(RHI_removeCmd_n); \
    DLL_FUNC(RHI_addRenderTarget); \
    DLL_FUNC(RHI_removeRenderTarget); \
    DLL_FUNC(RHI_addSampler); \
    DLL_FUNC(RHI_removeSampler); \
    DLL_FUNC(RHI_addShaderBinary); \
    DLL_FUNC(RHI_removeShader); \
    DLL_FUNC(RHI_addRootSignature); \
    DLL_FUNC(RHI_removeRootSignature); \
    DLL_FUNC(RHI_addPipeline); \
    DLL_FUNC(RHI_removePipeline); \
    DLL_FUNC(RHI_addPipelineCache); \
    DLL_FUNC(RHI_getPipelineCacheData); \
    DLL_FUNC(RHI_removePipelineCache); \
    DLL_FUNC(RHI_addDescriptorSet); \
    DLL_FUNC(RHI_removeDescriptorSet); \
    DLL_FUNC(RHI_updateDescriptorSet); \
    DLL_FUNC(RHI_resetCmdPool); \
    DLL_FUNC(RHI_beginCmd); \
    DLL_FUNC(RHI_endCmd); \
    DLL_FUNC(RHI_cmdBindRenderTargets); \
    DLL_FUNC(RHI_cmdSetViewport); \
    DLL_FUNC(RHI_cmdSetScissor); \
    DLL_FUNC(RHI_cmdBindPipeline); \
    DLL_FUNC(RHI_cmdBindDescriptorSet); \
    DLL_FUNC(RHI_cmdBindPushConstants); \
    DLL_FUNC(RHI_cmdBindPushConstantsByIndex); \
    DLL_FUNC(RHI_cmdBindIndexBuffer); \
    DLL_FUNC(RHI_cmdBindVertexBuffer); \
    DLL_FUNC(RHI_cmdDraw); \
    DLL_FUNC(RHI_cmdDrawInstanced); \
    DLL_FUNC(RHI_cmdDrawIndexed); \
    DLL_FUNC(RHI_cmdDrawIndexedInstanced); \
    DLL_FUNC(RHI_cmdDispatch); \
    DLL_FUNC(RHI_cmdResourceBarrier); \
    DLL_FUNC(RHI_cmdUpdateVirtualTexture); \
    DLL_FUNC(RHI_acquireNextImage); \
    DLL_FUNC(RHI_queueSubmit); \
    DLL_FUNC(RHI_queuePresent); \
    DLL_FUNC(RHI_waitQueueIdle); \
    DLL_FUNC(RHI_getFenceStatus); \
    DLL_FUNC(RHI_waitForFences); \
    DLL_FUNC(RHI_toggleVSync); \
    DLL_FUNC(RHI_getRecommendedSwapchainFormat); \
    DLL_FUNC(RHI_addIndirectCommandSignature); \
    DLL_FUNC(RHI_removeIndirectCommandSignature); \
    DLL_FUNC(RHI_cmdExecuteIndirect); \
    DLL_FUNC(RHI_getTimestampFrequency); \
    DLL_FUNC(RHI_addQueryPool); \
    DLL_FUNC(RHI_removeQueryPool); \
    DLL_FUNC(RHI_cmdResetQueryPool); \
    DLL_FUNC(RHI_cmdBeginQuery); \
    DLL_FUNC(RHI_cmdEndQuery); \
    DLL_FUNC(RHI_cmdResolveQuery); \
    DLL_FUNC(RHI_calculateMemoryStats); \
    DLL_FUNC(RHI_calculateMemoryUse); \
    DLL_FUNC(RHI_freeMemoryStats); \
    DLL_FUNC(RHI_cmdBeginDebugMarker); \
    DLL_FUNC(RHI_cmdEndDebugMarker); \
    DLL_FUNC(RHI_cmdAddDebugMarker); \
    DLL_FUNC(RHI_setBufferName); \
    DLL_FUNC(RHI_setTextureName); \
    DLL_FUNC(RHI_setRenderTargetName); \
    DLL_FUNC(RHI_setPipelineName); \
    DLL_FUNC(RHI_addBuffer); \
    DLL_FUNC(RHI_removeBuffer); \
    DLL_FUNC(RHI_addTexture); \
    DLL_FUNC(RHI_removeTexture); \
    DLL_FUNC(RHI_mapBuffer); \
    DLL_FUNC(RHI_unmapBuffer); \
    DLL_FUNC(RHI_cmdUpdateBuffer); \
    DLL_FUNC(RHI_cmdUpdateSubresource); \
    DLL_FUNC(RHI_initResourceLoaderInterface); \
    DLL_FUNC(RHI_exitResourceLoaderInterface); \
    DLL_FUNC(RHI_addBufferResource); \
    DLL_FUNC(RHI_addTextureResource); \
    DLL_FUNC(RHI_addGeomResource); \
    DLL_FUNC(RHI_beginUpdateBufferResource); \
    DLL_FUNC(RHI_beginUpdateTextureResource); \
    DLL_FUNC(RHI_endUpdateBufferResource); \
    DLL_FUNC(RHI_endUpdateTextureResource); \
    DLL_FUNC(RHI_removeBufferResource); \
    DLL_FUNC(RHI_removeTextureResource); \
    DLL_FUNC(RHI_removeGeomResource); \
    DLL_FUNC(RHI_allResourceLoadsCompleted); \
    DLL_FUNC(RHI_waitForAllResourceLoads); \
    DLL_FUNC(RHI_getLastTokenCompleted); \
    DLL_FUNC(RHI_isTokenCompleted); \
    DLL_FUNC(RHI_waitForToken); \
    DLL_FUNC(RHI_addShader); \
    DLL_FUNC(RHI_addPipelineCache); \
    DLL_FUNC(RHI_savePipelineCache); \
    DLL_FUNC(RHI_isRaytracingSupported); \
    DLL_FUNC(RHI_initRaytracing); \
    DLL_FUNC(RHI_removeRaytracing); \
    DLL_FUNC(RHI_addAccelerationStructure); \
    DLL_FUNC(RHI_removeAccelerationStructure); \
    DLL_FUNC(RHI_removeAccelerationStructureScratch); \
    DLL_FUNC(RHI_addRaytracingShaderTable); \
    DLL_FUNC(RHI_removeRaytracingShaderTable); \
    DLL_FUNC(RHI_cmdBuildAccelerationStructure); \
    DLL_FUNC(RHI_cmdDispatchRays); \
    DLL_FUNC(RHI_addSSVGFDenoiser); \
    DLL_FUNC(RHI_removeSSVGFDenoiser); \
    DLL_FUNC(RHI_clearSSVGFDenoiserTemporalHistory); \
    DLL_FUNC(RHI_cmdSSVGFDenoise); \
    DLL_FUNC(RHI_destroyShaderReflection); \
    DLL_FUNC(RHI_createPipelineReflection); \
    DLL_FUNC(RHI_destroyPipelineReflection); \


DLL_FUNCS()

#undef DLL_FUNC

#define DLL_FUNC(name) DLL_LIBRARY_FIND(##name);

const char *getRendererDLL(RHI_RendererApi renderer)
{
    switch(renderer)
    {
#ifdef _WIN32
        case RHI_API_D3D12:
            return "RHI_d3d12.dll";
        case RHI_API_VULKAN:
            return "RHI_vulkan.dll";
        case RHI_API_D3D11:
            return "RHI_d3d11.dll";
#elif defined(__APPLE__)
        case RHI_API_METAL:
            return "RHI_metal.dylib";
        case RHI_API_VULKAN:
            return "RHI_vulkan.dylib";
#else
        case RHI_API_VULKAN:
            return "RHI_vulkan.so";
#endif
        default:
            return NULL;
    }
}

/* Implementation function. */
RHI_Result RHI_init(RHI_RendererApi renderer)
{
    static int initialized = 0;
    static RHI_Result result = RHI_RESULT_SUCCESS;

    if(initialized)
    {
        return result;
    }

    initialized = 1;

    /* Load library. */
    lib = dynamic_library_open(getRendererDLL(renderer));

    if (lib == NULL)
    {
        result = RHI_RESULT_ERROR;
        return result;
    }

    DLL_FUNCS();

    return result;
}

void RHI_exit(void)
{
    if(lib != NULL)
    {
        /*  Ignore errors. */
        dynamic_library_close(lib);
        lib = NULL;
    }
}

#undef DLL_FUNC

#endif // !defined(RHI_SKIP_DECLARATIONS)

