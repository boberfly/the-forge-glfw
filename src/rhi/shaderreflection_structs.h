///////////////////////////////////////////////////////////////////////////
//
//  Autogenerated by bindgen.py
//
///////////////////////////////////////////////////////////////////////////


#pragma once
#ifndef RHI_SHADERREFLECTION_STRUCTS_H_
#define RHI_SHADERREFLECTION_STRUCTS_H_


#include "enums.h"
#include "shaderreflection_enums.h"
#include "structs.h"
        



typedef struct RHI_VertexInput {
    uint32_t size;
    const char * name;
    uint32_t name_size;
} RHI_VertexInput;

#ifdef METAL
typedef struct RHI_ArgumentDescriptor {
    MTLDataType mDataType;
    uint32_t mBufferIndex;
    uint32_t mArgumentIndex;
    uint32_t mArrayLength;
    MTLArgumentAccess mAccessType;
    MTLTextureType mTextureType;
    size_t mAlignment;
} RHI_ArgumentDescriptor;
#endif // METAL

typedef struct RHI_ShaderResource {
    RHI_DescriptorType type;
    uint32_t set;
    uint32_t reg;
    uint32_t size;
    RHI_ShaderStage used_stages;
    const char * name;
    uint32_t name_size;
    RHI_TextureDimension dim;
#if defined(METAL)
    uint32_t alignment;
#endif // defined(METAL)
#if defined(METAL)
    uint32_t mtlTextureType;
#endif // defined(METAL)
#if defined(METAL)
    bool mIsArgumentBufferField;
#endif // defined(METAL)
#ifdef METAL
    RHI_ArgumentDescriptor mtlArgumentDescriptors;
#endif // METAL
} RHI_ShaderResource;

typedef struct RHI_ShaderVariable {
    uint32_t parent_index;
    uint32_t offset;
    uint32_t size;
    const char * name;
    uint32_t name_size;
} RHI_ShaderVariable;

typedef struct RHI_ShaderReflection {
    RHI_ShaderStage mShaderStage;
    char * pNamePool;
    uint32_t mNamePoolSize;
    RHI_VertexInput * pVertexInputs;
    uint32_t mVertexInputsCount;
    RHI_ShaderResource * pShaderResources;
    uint32_t mShaderResourceCount;
    RHI_ShaderVariable * pVariables;
    uint32_t mVariableCount;
    uint32_t mNumThreadsPerGroup[3];
    uint32_t mNumControlPoint;
    char * pEntryPoint;
} RHI_ShaderReflection;

typedef struct RHI_PipelineReflection {
    RHI_ShaderStage mShaderStages;
    RHI_ShaderReflection mStageReflections[5];
    uint32_t mStageReflectionCount;
    uint32_t mVertexStageIndex;
    uint32_t mHullStageIndex;
    uint32_t mDomainStageIndex;
    uint32_t mGeometryStageIndex;
    uint32_t mPixelStageIndex;
    RHI_ShaderResource * pShaderResources;
    uint32_t mShaderResourceCount;
    RHI_ShaderVariable * pVariables;
    uint32_t mVariableCount;
} RHI_PipelineReflection;



#endif // RHI_SHADERREFLECTION_STRUCTS_H_

