///////////////////////////////////////////////////////////////////////////
//
//  Autogenerated by bindgen.py
//
///////////////////////////////////////////////////////////////////////////


#pragma once
#ifndef RHI_RHI_H_
#define RHI_RHI_H_


#include "export.h"
#include "enums.h"
#include "imageformat.h"
#include "structs.h"
#include "resourceloader.h"
#include "shaderreflection.h"
        

#if defined(__cplusplus)
extern "C" {
#endif
RHI_API RHI_Result RHI_init(RHI_RendererApi renderer);
RHI_API void RHI_exit(void);


#if !defined(RHI_SKIP_DECLARATIONS)

RHI_API void RHI_initRenderer(const char * app_name, const RHI_RendererDesc * p_settings, RHI_RendererHandle * pRenderer);
RHI_API void RHI_removeRenderer(RHI_RendererHandle pRenderer);
RHI_API void RHI_addFence(RHI_RendererHandle pRenderer, RHI_FenceHandle * p_fence);
RHI_API void RHI_removeFence(RHI_RendererHandle pRenderer, RHI_FenceHandle p_fence);
RHI_API void RHI_addSemaphore(RHI_RendererHandle pRenderer, RHI_SemaphoreHandle * p_semaphore);
RHI_API void RHI_removeSemaphore(RHI_RendererHandle pRenderer, RHI_SemaphoreHandle p_semaphore);
RHI_API void RHI_addQueue(RHI_RendererHandle pRenderer, RHI_QueueDesc * pQDesc, RHI_QueueHandle * pQueue);
RHI_API void RHI_removeQueue(RHI_RendererHandle pRenderer, RHI_QueueHandle pQueue);
RHI_API void RHI_addSwapChain(RHI_RendererHandle pRenderer, const RHI_SwapChainDesc * p_desc, RHI_SwapChainHandle * p_swap_chain);
RHI_API void RHI_removeSwapChain(RHI_RendererHandle pRenderer, RHI_SwapChainHandle p_swap_chain);
RHI_API void RHI_addCmdPool(RHI_RendererHandle pRenderer, const RHI_CmdPoolDesc * p_desc, RHI_CmdPoolHandle * p_cmd_pool);
RHI_API void RHI_removeCmdPool(RHI_RendererHandle pRenderer, RHI_CmdPoolHandle p_CmdPool);
RHI_API void RHI_addCmd(RHI_RendererHandle pRenderer, const RHI_CmdDesc * p_desc, RHI_CmdHandle * p_cmd);
RHI_API void RHI_removeCmd(RHI_RendererHandle pRenderer, RHI_CmdHandle pCmd);
RHI_API void RHI_addCmd_n(RHI_RendererHandle pRenderer, const RHI_CmdDesc * p_desc, uint32_t cmd_count, RHI_CmdHandle ** p_cmds);
RHI_API void RHI_removeCmd_n(RHI_RendererHandle pRenderer, uint32_t cmd_count, RHI_CmdHandle * p_cmds);
RHI_API void RHI_addRenderTarget(RHI_RendererHandle pRenderer, const RHI_RenderTargetDesc * pDesc, RHI_RenderTargetHandle * ppRenderTarget);
RHI_API void RHI_removeRenderTarget(RHI_RendererHandle pRenderer, RHI_RenderTargetHandle pRenderTarget);
RHI_API void RHI_addSampler(RHI_RendererHandle pRenderer, const RHI_SamplerDesc * pDesc, RHI_SamplerHandle * p_sampler);
RHI_API void RHI_removeSampler(RHI_RendererHandle pRenderer, RHI_SamplerHandle p_sampler);
RHI_API void RHI_addShaderBinary(RHI_RendererHandle pRenderer, const RHI_BinaryShaderDesc * p_desc, RHI_ShaderHandle * p_shader_program);
RHI_API void RHI_removeShader(RHI_RendererHandle pRenderer, RHI_ShaderHandle p_shader_program);
RHI_API void RHI_addRootSignature(RHI_RendererHandle pRenderer, const RHI_RootSignatureDesc * pDesc, RHI_RootSignatureHandle * pRootSignature);
RHI_API void RHI_removeRootSignature(RHI_RendererHandle pRenderer, RHI_RootSignatureHandle pRootSignature);
RHI_API void RHI_addPipeline(RHI_RendererHandle pRenderer, const RHI_PipelineDesc * p_pipeline_settings, RHI_PipelineHandle * p_pipeline);
RHI_API void RHI_removePipeline(RHI_RendererHandle pRenderer, RHI_PipelineHandle p_pipeline);
RHI_API void RHI_addPipelineCache(RHI_RendererHandle pRenderer, const RHI_PipelineCacheDesc * pDesc, RHI_PipelineCacheHandle * ppPipelineCache);
RHI_API void RHI_getPipelineCacheData(RHI_RendererHandle pRenderer, RHI_PipelineCacheHandle pPipelineCache, size_t * pSize, void * pData);
RHI_API void RHI_removePipelineCache(RHI_RendererHandle pRenderer, RHI_PipelineCacheHandle pPipelineCache);
RHI_API void RHI_addDescriptorSet(RHI_RendererHandle pRenderer, const RHI_DescriptorSetDesc * pDesc, RHI_DescriptorSetHandle * pDescriptorSet);
RHI_API void RHI_removeDescriptorSet(RHI_RendererHandle pRenderer, RHI_DescriptorSetHandle pDescriptorSet);
RHI_API void RHI_updateDescriptorSet(RHI_RendererHandle pRenderer, uint32_t index, RHI_DescriptorSetHandle pDescriptorSet, uint32_t count, const RHI_DescriptorData * pParams);
RHI_API void RHI_resetCmdPool(RHI_RendererHandle pRenderer, RHI_CmdPoolHandle pCmdPool);
RHI_API void RHI_beginCmd(RHI_CmdHandle p_cmd);
RHI_API void RHI_endCmd(RHI_CmdHandle p_cmd);
RHI_API void RHI_cmdBindRenderTargets(RHI_CmdHandle p_cmd, uint32_t render_target_count, RHI_RenderTargetHandle * p_render_targets, RHI_RenderTargetHandle p_depth_stencil, const RHI_LoadActionsDesc * loadActions, uint32_t * pColorArraySlices, uint32_t * pColorMipSlices, uint32_t depthArraySlice, uint32_t depthMipSlice);
RHI_API void RHI_cmdSetViewport(RHI_CmdHandle p_cmd, float x, float y, float width, float height, float min_depth, float max_depth);
RHI_API void RHI_cmdSetScissor(RHI_CmdHandle p_cmd, uint32_t x, uint32_t y, uint32_t width, uint32_t height);
RHI_API void RHI_cmdBindPipeline(RHI_CmdHandle p_cmd, RHI_PipelineHandle p_pipeline);
RHI_API void RHI_cmdBindDescriptorSet(RHI_CmdHandle pCmd, uint32_t index, RHI_DescriptorSetHandle pDescriptorSet);
RHI_API void RHI_cmdBindPushConstants(RHI_CmdHandle pCmd, RHI_RootSignatureHandle pRootSignature, const char * pName, const void * pConstants);
RHI_API void RHI_cmdBindPushConstantsByIndex(RHI_CmdHandle pCmd, RHI_RootSignatureHandle pRootSignature, uint32_t paramIndex, const void * pConstants);
RHI_API void RHI_cmdBindIndexBuffer(RHI_CmdHandle p_cmd, RHI_BufferHandle p_buffer, uint32_t indexType, uint64_t offset);
RHI_API void RHI_cmdBindVertexBuffer(RHI_CmdHandle p_cmd, uint32_t buffer_count, RHI_BufferHandle * pp_buffers, const uint32_t * pStrides, const uint64_t * pOffsets);
RHI_API void RHI_cmdDraw(RHI_CmdHandle p_cmd, uint32_t vertex_count, uint32_t first_vertex);
RHI_API void RHI_cmdDrawInstanced(RHI_CmdHandle pCmd, uint32_t vertexCount, uint32_t firstVertex, uint32_t instanceCount, uint32_t firstInstance);
RHI_API void RHI_cmdDrawIndexed(RHI_CmdHandle p_cmd, uint32_t index_count, uint32_t first_index, uint32_t first_vertex);
RHI_API void RHI_cmdDrawIndexedInstanced(RHI_CmdHandle pCmd, uint32_t indexCount, uint32_t firstIndex, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);
RHI_API void RHI_cmdDispatch(RHI_CmdHandle p_cmd, uint32_t group_count_x, uint32_t group_count_y, uint32_t group_count_z);
RHI_API void RHI_cmdResourceBarrier(RHI_CmdHandle p_cmd, uint32_t buffer_barrier_count, RHI_BufferBarrier * p_buffer_barriers, uint32_t texture_barrier_count, RHI_TextureBarrier * p_texture_barriers, uint32_t rt_barrier_count, RHI_RenderTargetBarrier * p_rt_barriers);
RHI_API void RHI_cmdUpdateVirtualTexture(RHI_CmdHandle pCmd, RHI_TextureHandle pTexture);
RHI_API void RHI_acquireNextImage(RHI_RendererHandle pRenderer, RHI_SwapChainHandle p_swap_chain, RHI_SemaphoreHandle p_signal_semaphore, RHI_FenceHandle p_fence, uint32_t * p_image_index);
RHI_API void RHI_queueSubmit(RHI_QueueHandle p_queue, const RHI_QueueSubmitDesc * p_desc);
RHI_API void RHI_queuePresent(RHI_QueueHandle p_queue, const RHI_QueuePresentDesc * p_desc);
RHI_API void RHI_waitQueueIdle(RHI_QueueHandle p_queue);
RHI_API void RHI_getFenceStatus(RHI_RendererHandle pRenderer, RHI_FenceHandle p_fence, RHI_FenceStatus * p_fence_status);
RHI_API void RHI_waitForFences(RHI_RendererHandle pRenderer, uint32_t fenceCount, RHI_FenceHandle * ppFences);
RHI_API void RHI_toggleVSync(RHI_RendererHandle pRenderer, RHI_SwapChainHandle * ppSwapchain);
RHI_API RHI_ImageFormat RHI_getRecommendedSwapchainFormat(bool hintHDR);
RHI_API void RHI_addIndirectCommandSignature(RHI_RendererHandle pRenderer, const RHI_CommandSignatureDesc * p_desc, RHI_CommandSignatureHandle * ppCommandSignature);
RHI_API void RHI_removeIndirectCommandSignature(RHI_RendererHandle pRenderer, RHI_CommandSignatureHandle pCommandSignature);
RHI_API void RHI_cmdExecuteIndirect(RHI_CmdHandle pCmd, RHI_CommandSignatureHandle pCommandSignature, int maxCommandCount, RHI_BufferHandle pIndirectBuffer, uint64_t bufferOffset, RHI_BufferHandle pCounterBuffer, uint64_t counterBufferOffset);
RHI_API void RHI_getTimestampFrequency(RHI_QueueHandle pQueue, double * pFrequency);
RHI_API void RHI_addQueryPool(RHI_RendererHandle pRenderer, const RHI_QueryPoolDesc * pDesc, RHI_QueryPoolHandle * ppQueryPool);
RHI_API void RHI_removeQueryPool(RHI_RendererHandle pRenderer, RHI_QueryPoolHandle pQueryPool);
RHI_API void RHI_cmdResetQueryPool(RHI_CmdHandle pCmd, RHI_QueryPoolHandle pQueryPool, uint32_t startQuery, uint32_t queryCount);
RHI_API void RHI_cmdBeginQuery(RHI_CmdHandle pCmd, RHI_QueryPoolHandle pQueryPool, RHI_QueryDesc * pQuery);
RHI_API void RHI_cmdEndQuery(RHI_CmdHandle pCmd, RHI_QueryPoolHandle pQueryPool, RHI_QueryDesc * pQuery);
RHI_API void RHI_cmdResolveQuery(RHI_CmdHandle pCmd, RHI_QueryPoolHandle pQueryPool, RHI_BufferHandle pReadbackBuffer, uint32_t startQuery, uint32_t queryCount);
RHI_API void RHI_calculateMemoryStats(RHI_RendererHandle pRenderer, char ** stats);
RHI_API void RHI_calculateMemoryUse(RHI_RendererHandle pRenderer, uint64_t * usedBytes, uint64_t * totalAllocatedBytes);
RHI_API void RHI_freeMemoryStats(RHI_RendererHandle pRenderer, char * stats);
RHI_API void RHI_cmdBeginDebugMarker(RHI_CmdHandle pCmd, float r, float g, float b, const char * pName);
RHI_API void RHI_cmdEndDebugMarker(RHI_CmdHandle pCmd);
RHI_API void RHI_cmdAddDebugMarker(RHI_CmdHandle pCmd, float r, float g, float b, const char * pName);
RHI_API void RHI_setBufferName(RHI_RendererHandle pRenderer, RHI_BufferHandle pBuffer, const char * pName);
RHI_API void RHI_setTextureName(RHI_RendererHandle pRenderer, RHI_TextureHandle pTexture, const char * pName);
RHI_API void RHI_setRenderTargetName(RHI_RendererHandle pRenderer, RHI_RenderTargetHandle pRenderTarget, const char * pName);
RHI_API void RHI_setPipelineName(RHI_RendererHandle pRenderer, RHI_PipelineHandle pPipeline, const char * pName);
RHI_API void RHI_addBuffer(RHI_RendererHandle pRenderer, const RHI_BufferDesc * desc, RHI_BufferHandle * pp_buffer);
RHI_API void RHI_removeBuffer(RHI_RendererHandle pRenderer, RHI_BufferHandle p_buffer);
RHI_API void RHI_addTexture(RHI_RendererHandle pRenderer, const RHI_TextureDesc * pDesc, RHI_TextureHandle * pp_texture);
RHI_API void RHI_removeTexture(RHI_RendererHandle pRenderer, RHI_TextureHandle p_texture);
RHI_API void RHI_mapBuffer(RHI_RendererHandle pRenderer, RHI_BufferHandle pBuffer, RHI_ReadRange * pRange);
RHI_API void RHI_unmapBuffer(RHI_RendererHandle pRenderer, RHI_BufferHandle pBuffer);
RHI_API void RHI_cmdUpdateBuffer(RHI_CmdHandle pCmd, RHI_BufferHandle pBuffer, uint64_t dstOffset, RHI_BufferHandle pSrcBuffer, uint64_t srcOffset, uint64_t size);
RHI_API void RHI_cmdUpdateSubresource(RHI_CmdHandle pCmd, RHI_TextureHandle pTexture, RHI_BufferHandle pSrcBuffer, RHI_SubresourceDataDesc * pSubresourceDesc);


// accessors TheForge C API has opaque handles, this is largely okay as its mostly a push API
// however a few things do need passing back (mostly for rendertarget and swapchain)
// these calls implment the required accessors.
RHI_API RHI_RenderTargetHandle RHI_swapChainGetRenderTarget(RHI_SwapChainHandle swapChain, int index);
RHI_API bool RHI_swapChainGetVSync(RHI_SwapChainHandle handle);
RHI_API RHI_TextureHandle RHI_renderTargetGetTexture(RHI_RenderTargetHandle renderTarget);
RHI_API void RHI_renderTargetGetDesc(RHI_RenderTargetHandle renderTarget, RHI_RenderTargetDesc &desc);
RHI_API uint32_t RHI_textureGetWidth(RHI_TextureHandle handle);
RHI_API uint32_t RHI_textureGetHeight(RHI_TextureHandle handle);

RHI_API RHI_RendererApi RHI_getRendererApi(RHI_RendererHandle handle);
RHI_API bool RHI_canShaderReadFrom(RHI_RendererHandle handle, RHI_ImageFormat format);
RHI_API bool RHI_canShaderWriteTo(RHI_RendererHandle handle, RHI_ImageFormat format);
RHI_API bool RHI_canRenderTargetWriteTo(RHI_RendererHandle handle, RHI_ImageFormat format);

// do not free return owned by the shader!
RHI_API RHI_PipelineReflection const* RHI_shaderGetPipelineReflection(RHI_ShaderHandle shader);



#endif // !defined(RHI_SKIP_DECLARATIONS)

#if defined(__cplusplus)
} // extern "C"
#endif

#endif // RHI_RHI_H_

