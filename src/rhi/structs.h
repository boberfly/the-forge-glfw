///////////////////////////////////////////////////////////////////////////
//
//  Autogenerated by bindgen.py
//
///////////////////////////////////////////////////////////////////////////


#pragma once
#ifndef RHI_STRUCTS_H_
#define RHI_STRUCTS_H_


#include <stddef.h>
#include <stdbool.h>
#include <stdint.h>

#include "enums.h"
#include "imageformat.h"
        

typedef struct RHI_Renderer *RHI_RendererHandle;
typedef struct RHI_Fence *RHI_FenceHandle;
typedef struct RHI_Semaphore *RHI_SemaphoreHandle;
typedef struct RHI_Queue *RHI_QueueHandle;
typedef struct RHI_CmdPool *RHI_CmdPoolHandle;
typedef struct RHI_Cmd *RHI_CmdHandle;
typedef struct RHI_RenderTarget *RHI_RenderTargetHandle;
typedef struct RHI_Sampler *RHI_SamplerHandle;
typedef struct RHI_Shader *RHI_ShaderHandle;
typedef struct RHI_RootSignature *RHI_RootSignatureHandle;
typedef struct RHI_Pipeline *RHI_PipelineHandle;
typedef struct RHI_Raytracing *RHI_RaytracingHandle;
typedef struct RHI_RaytracingHitGroup *RHI_RaytracingHitGroupHandle;
typedef struct RHI_DescriptorInfo *RHI_DescriptorInfoHandle;
typedef struct RHI_DescriptorSet *RHI_DescriptorSetHandle;
typedef struct RHI_Buffer *RHI_BufferHandle;
typedef struct RHI_Texture *RHI_TextureHandle;
typedef struct RHI_AccelerationStructure *RHI_AccelerationStructureHandle;
typedef struct RHI_QueryPool *RHI_QueryPoolHandle;
typedef struct RHI_CommandSignature *RHI_CommandSignatureHandle;
typedef struct RHI_SwapChain *RHI_SwapChainHandle;
typedef struct RHI_VirtualTexture *RHI_VirtualTextureHandle;
typedef struct RHI_PipelineCache *RHI_PipelineCacheHandle;
typedef struct RHI_RaytracingShaderTable *RHI_RaytracingShaderTableHandle;



typedef void(*RHI_LogFn)(RHI_LogType, const char*, const char*);
typedef struct RHI_WindowHandle {
    void * display;  // X11
    void * window;   // native window
    void * activity; // android
} RHI_WindowHandle;

struct RHI_SubresourceDataDesc
{
    uint64_t mSrcOffset;
    uint32_t mMipLevel;
    uint32_t mArrayLayer;
// #if defined(DIRECT3D11) || defined(METAL) || defined(VULKAN)
    uint32_t mRowPitch;
    uint32_t mSlicePitch;
};

typedef struct RHI_IndirectDrawArguments {
    uint32_t mVertexCount;
    uint32_t mInstanceCount;
    uint32_t mStartVertex;
    uint32_t mStartInstance;
} RHI_IndirectDrawArguments;

typedef struct RHI_IndirectDrawIndexArguments {
    uint32_t mIndexCount;
    uint32_t mInstanceCount;
    uint32_t mStartIndex;
    uint32_t mVertexOffset;
    uint32_t mStartInstance;
} RHI_IndirectDrawIndexArguments;

typedef struct RHI_IndirectDispatchArguments {
    uint32_t mGroupCountX;
    uint32_t mGroupCountY;
    uint32_t mGroupCountZ;
} RHI_IndirectDispatchArguments;

typedef struct RHI_ClearValue {
    union {
        struct {
            float r;
            float g;
            float b;
            float a;
        };
        struct {
            float depth;
            uint32_t stencil;
        };
    };
} RHI_ClearValue;

typedef struct RHI_BufferBarrier {
    RHI_BufferHandle pBuffer;
    RHI_ResourceState mCurrentState;
    RHI_ResourceState mNewState;
    uint8_t mBeginOnly : 1;
    uint8_t mEndOnly : 1;
    uint8_t mAcquire : 1;
    uint8_t mRelease : 1;
    uint8_t mQueueType : 5;
} RHI_BufferBarrier;

typedef struct RHI_TextureBarrier {
    RHI_TextureHandle pTexture;
    RHI_ResourceState mCurrentState;
    RHI_ResourceState mNewState;
    uint8_t mBeginOnly : 1;
    uint8_t mEndOnly : 1;
    uint8_t mAcquire : 1;
    uint8_t mRelease : 1;
    uint8_t mQueueType : 5;
} RHI_TextureBarrier;

typedef struct RHI_RenderTargetBarrier {
    RHI_RenderTargetHandle pRenderTarget;
    RHI_ResourceState mCurrentState;
    RHI_ResourceState mNewState;
    uint8_t mBeginOnly : 1;
    uint8_t mEndOnly : 1;
    uint8_t mAcquire : 1;
    uint8_t mRelease : 1;
    uint8_t mQueueType : 5;
} RHI_RenderTargetBarrier;

typedef struct RHI_ReadRange {
    uint64_t mOffset;
    uint64_t mSize;
} RHI_ReadRange;

typedef struct RHI_QueryPoolDesc {
    RHI_QueryType mType;
    uint32_t mQueryCount;
    uint32_t mNodeIndex;
} RHI_QueryPoolDesc;

typedef struct RHI_QueryDesc {
    uint32_t mIndex;
} RHI_QueryDesc;

typedef struct RHI_BufferDesc {
    uint64_t mSize;
    uint32_t mAlignment;
    RHI_ResourceMemoryUsage mMemoryUsage;
    RHI_BufferCreationFlags mFlags;
    RHI_QueueType mQueueType;
    RHI_ResourceState mStartState;
    uint64_t mFirstElement;
    uint64_t mElementCount;
    uint64_t mStructStride;
    RHI_IndirectArgumentType mICBDrawType;
    uint32_t mICBMaxVertexBufferBind;
    uint32_t mICBMaxFragmentBufferBind;
    RHI_BufferHandle pCounterBuffer;
    RHI_ImageFormat mFormat;
    RHI_DescriptorType mDescriptors;
    const char * pName;
    uint32_t * pSharedNodeIndices;
    uint32_t mNodeIndex;
    uint32_t mSharedNodeIndexCount;
} RHI_BufferDesc;

typedef struct RHI_TextureDesc {
    RHI_TextureCreationFlags mFlags;
    uint32_t mWidth;
    uint32_t mHeight;
    uint32_t mDepth;
    uint32_t mArraySize;
    uint32_t mMipLevels;
    RHI_SampleCount mSampleCount;
    uint32_t mSampleQuality;
    RHI_ImageFormat mFormat;
    RHI_ClearValue mClearValue;
    RHI_ResourceState mStartState;
    RHI_DescriptorType mDescriptors;
    const void * pNativeHandle;
    const char * pName;
    uint32_t * pSharedNodeIndices;
    uint32_t mSharedNodeIndexCount;
    uint32_t mNodeIndex;
    bool mHostVisible;
} RHI_TextureDesc;

typedef struct RHI_RenderTargetDesc {
    RHI_TextureCreationFlags mFlags;
    uint32_t mWidth;
    uint32_t mHeight;
    uint32_t mDepth;
    uint32_t mArraySize;
    uint32_t mMipLevels;
    RHI_SampleCount mSampleCount;
    RHI_ImageFormat mFormat;
    RHI_ResourceState mStartState;
    RHI_ClearValue mClearValue;
    uint32_t mSampleQuality;
    RHI_DescriptorType mDescriptors;
    const void * pNativeHandle;
    const char * pName;
    uint32_t * pSharedNodeIndices;
    uint32_t mSharedNodeIndexCount;
    uint32_t mNodeIndex;
} RHI_RenderTargetDesc;

typedef struct RHI_LoadActionsDesc {
    RHI_ClearValue mClearColorValues[8];
    RHI_LoadActionType mLoadActionsColor[8];
    RHI_ClearValue mClearDepth;
    RHI_LoadActionType mLoadActionDepth;
    RHI_LoadActionType mLoadActionStencil;
} RHI_LoadActionsDesc;

typedef struct RHI_SamplerDesc {
    RHI_FilterType mMinFilter;
    RHI_FilterType mMagFilter;
    RHI_MipMapMode mMipMapMode;
    RHI_AddressMode mAddressU;
    RHI_AddressMode mAddressV;
    RHI_AddressMode mAddressW;
    float mMipLodBias;
    float mMaxAnisotropy;
    RHI_CompareMode mCompareFunc;
} RHI_SamplerDesc;

typedef struct RHI_RootSignatureDesc {
    RHI_ShaderHandle * ppShaders;
    uint32_t mShaderCount;
    uint32_t mMaxBindlessTextures;
    const char ** ppStaticSamplerNames;
    RHI_SamplerHandle * ppStaticSamplers;
    uint32_t mStaticSamplerCount;
    RHI_RootSignatureFlags mFlags;
} RHI_RootSignatureDesc;

typedef struct RHI_DescriptorData {
    const char * pName;
    union {
        struct {
            const uint64_t * pOffsets;
            const uint64_t * pSizes;
        };
        struct {
            uint32_t mDescriptorSetBufferIndex;
            RHI_ShaderHandle mDescriptorSetShader;
            RHI_ShaderStage mDescriptorSetShaderStage;
        };
        uint32_t mUAVMipSlice;
        bool mBindStencilResource;
    };
    union {
        RHI_TextureHandle * ppTextures;
        RHI_SamplerHandle * ppSamplers;
        RHI_BufferHandle * ppBuffers;
        RHI_PipelineHandle * ppPipelines;
        RHI_DescriptorSetHandle * ppDescriptorSet;
        RHI_AccelerationStructureHandle * ppAccelerationStructures;
    };
    uint32_t mCount;
    uint32_t mIndex = (uint32_t)-1;
    bool mExtractBuffer = false;
} RHI_DescriptorData;

typedef struct RHI_CmdPoolDesc {
    RHI_QueueHandle pQueue;
    bool mTransient;
} RHI_CmdPoolDesc;

typedef struct RHI_CmdDesc {
    RHI_CmdPoolHandle pPool;
    bool mSecondary;
} RHI_CmdDesc;

typedef struct RHI_QueueDesc {
    RHI_QueueType mType;
    RHI_QueueFlag mFlag;
    RHI_QueuePriority mPriority;
    uint32_t mNodeIndex;
} RHI_QueueDesc;

typedef struct RHI_ShaderMacro {
    const char * definition;
    const char * value;
} RHI_ShaderMacro;

typedef struct RHI_BinaryShaderStageDesc {
    void * pByteCode;
    uint32_t mByteCodeSize;
    const char * pEntryPoint;
    char * pSource;
    uint32_t mSourceSize;
} RHI_BinaryShaderStageDesc;

typedef struct RHI_BinaryShaderDesc {
    RHI_ShaderStage mStages;
    uint32_t mOwnByteCode : 1;
    RHI_BinaryShaderStageDesc mVert;
    RHI_BinaryShaderStageDesc mFrag;
    RHI_BinaryShaderStageDesc mGeom;
    RHI_BinaryShaderStageDesc mHull;
    RHI_BinaryShaderStageDesc mDomain;
    RHI_BinaryShaderStageDesc mComp;
} RHI_BinaryShaderDesc;

typedef struct RHI_BlendStateDesc {
    RHI_BlendConstant mSrcFactors[8];
    RHI_BlendConstant mDstFactors[8];
    RHI_BlendConstant mSrcAlphaFactors[8];
    RHI_BlendConstant mDstAlphaFactors[8];
    RHI_BlendMode mBlendModes[8];
    RHI_BlendMode mBlendAlphaModes[8];
    int32_t mMasks[8];
    RHI_BlendStateTargets mRenderTargetMask;
    bool mAlphaToCoverage;
    bool mIndependentBlend;
} RHI_BlendStateDesc;

typedef struct RHI_DepthStateDesc {
    bool mDepthTest;
    bool mDepthWrite;
    RHI_CompareMode mDepthFunc;
    bool mStencilTest;
    uint8_t mStencilReadMask;
    uint8_t mStencilWriteMask;
    RHI_CompareMode mStencilFrontFunc;
    RHI_StencilOp mStencilFrontFail;
    RHI_StencilOp mDepthFrontFail;
    RHI_StencilOp mStencilFrontPass;
    RHI_CompareMode mStencilBackFunc;
    RHI_StencilOp mStencilBackFail;
    RHI_StencilOp mDepthBackFail;
    RHI_StencilOp mStencilBackPass;
} RHI_DepthStateDesc;

typedef struct RHI_RasterizerStateDesc {
    RHI_CullMode mCullMode;
    int32_t mDepthBias;
    float mSlopeScaledDepthBias;
    RHI_FillMode mFillMode;
    bool mMultiSample;
    bool mScissor;
    RHI_FrontFace mFrontFace;
    bool mDepthClampEnable;
} RHI_RasterizerStateDesc;

typedef struct RHI_VertexAttrib {
    RHI_ShaderSemantic mSemantic;
    uint32_t mSemanticNameLength;
    char mSemanticName[128];
    RHI_ImageFormat mFormat;
    uint32_t mBinding;
    uint32_t mLocation;
    uint32_t mOffset;
    RHI_VertexAttribRate mRate;
} RHI_VertexAttrib;

typedef struct RHI_VertexLayout {
    uint32_t mAttribCount;
    RHI_VertexAttrib mAttribs[15];
} RHI_VertexLayout;

typedef struct RHI_RaytracingPipelineDesc {
    RHI_RaytracingHandle pRaytracing;
    RHI_RootSignatureHandle pGlobalRootSignature;
    RHI_ShaderHandle pRayGenShader;
    RHI_RootSignatureHandle pRayGenRootSignature;
    RHI_ShaderHandle * ppMissShaders;
    RHI_RootSignatureHandle * ppMissRootSignatures;
    RHI_RaytracingHitGroupHandle pHitGroups;
    RHI_RootSignatureHandle pEmptyRootSignature;
    unsigned int mMissShaderCount;
    unsigned int mHitGroupCount;
    unsigned int mPayloadSize;
    unsigned int mAttributeSize;
    unsigned int mMaxTraceRecursionDepth;
    unsigned int mMaxRaysCount;
} RHI_RaytracingPipelineDesc;

typedef struct RHI_GraphicsPipelineDesc {
    RHI_ShaderHandle pShaderProgram;
    RHI_RootSignatureHandle pRootSignature;
    RHI_VertexLayout * pVertexLayout;
    RHI_BlendStateDesc * pBlendState;
    RHI_DepthStateDesc * pDepthState;
    RHI_RasterizerStateDesc * pRasterizerState;
    RHI_ImageFormat * pColorFormats;
    uint32_t mRenderTargetCount;
    RHI_SampleCount mSampleCount;
    uint32_t mSampleQuality;
    RHI_ImageFormat mDepthStencilFormat;
    RHI_PrimitiveTopology mPrimitiveTopo;
    bool mSupportIndirectCommandBuffer;
} RHI_GraphicsPipelineDesc;

typedef struct RHI_ComputePipelineDesc {
    RHI_ShaderHandle pShaderProgram;
    RHI_RootSignatureHandle pRootSignature;
} RHI_ComputePipelineDesc;

typedef struct RHI_PipelineDesc {
    RHI_PipelineType mType;
    union {
        RHI_ComputePipelineDesc mComputeDesc;
        RHI_GraphicsPipelineDesc mGraphicsDesc;
        RHI_RaytracingPipelineDesc mRaytracingDesc;
    };
    RHI_PipelineCacheHandle pCache;
    void * pPipelineExtensions;
    uint32_t mExtensionCount;
    const char * pName;
} RHI_PipelineDesc;

typedef struct RHI_PipelineCacheDesc {
    void * pData;
    size_t mSize;
    RHI_PipelineCacheFlags mFlags;
} RHI_PipelineCacheDesc;

typedef struct RHI_SwapChainDesc {
    RHI_WindowHandle mWindowHandle;
    RHI_QueueHandle * ppPresentQueues;
    uint32_t mPresentQueueCount;
    uint32_t mImageCount;
    uint32_t mWidth;
    uint32_t mHeight;
    RHI_ImageFormat mColorFormat;
    RHI_ClearValue mColorClearValue;
    bool mEnableVsync;
    bool mUseFlipSwapEffect;
} RHI_SwapChainDesc;

typedef struct RHI_RendererDesc {
    RHI_LogFn pLogFn;
    RHI_RendererApi mApi;
    RHI_ShaderTarget mShaderTarget;
    RHI_GpuMode mGpuMode;
#if defined(VULKAN)
    const char ** ppInstanceLayers;
#endif // defined(VULKAN)
#if defined(VULKAN)
    const char ** ppInstanceExtensions;
#endif // defined(VULKAN)
#if defined(VULKAN)
    const char ** ppDeviceExtensions;
#endif // defined(VULKAN)
#if defined(VULKAN)
    uint32_t mInstanceLayerCount;
#endif // defined(VULKAN)
#if defined(VULKAN)
    uint32_t mInstanceExtensionCount;
#endif // defined(VULKAN)
#if defined(VULKAN)
    uint32_t mDeviceExtensionCount;
#endif // defined(VULKAN)
#if defined(VULKAN)
    bool mRequestAllAvailableQueues;
#endif // defined(VULKAN)
#if defined(DIRECT3D12) || defined(DIRECT3D11)
    int mDxFeatureLevel;
#endif // defined(DIRECT3D12) || defined(DIRECT3D11)
    bool mEnableGPUBasedValidation;
} RHI_RendererDesc;

typedef struct RHI_GPUVendorPreset {
    char mVendorId[64];
    char mModelId[64];
    char mRevisionId[64];
    RHI_GPUPresetLevel mPresetLevel;
    char mGpuName[64];
    char mGpuDriverVersion[64];
    char mGpuDriverDate[64];
} RHI_GPUVendorPreset;

typedef struct RHI_GPUCapBits {
    bool canShaderReadFrom[202];
    bool canShaderWriteTo[202];
    bool canRenderTargetWriteTo[202];
} RHI_GPUCapBits;

typedef struct RHI_GPUSettings {
    uint32_t mUniformBufferAlignment;
    uint32_t mUploadBufferTextureAlignment;
    uint32_t mUploadBufferTextureRowAlignment;
    uint32_t mMaxVertexInputBindings;
    uint32_t mMaxRootSignatureDWORDS;
    uint32_t mWaveLaneCount;
    RHI_WaveOpsSupportFlags mWaveOpsSupportFlags;
    RHI_GPUVendorPreset mGpuVendorPreset;
#if defined(METAL)
    uint32_t mArgumentBufferMaxTextures;
#endif // defined(METAL)
    uint32_t mMultiDrawIndirect : 1;
    uint32_t mROVsSupported : 1;
    uint32_t mTessellationSupported : 1;
    uint32_t mGeometryShaderSupported : 1;
#if defined(METAL)
    uint32_t mHeaps : 1;
#endif // defined(METAL)
#if defined(METAL)
    uint32_t mPlacementHeaps : 1;
#endif // defined(METAL)
} RHI_GPUSettings;

typedef struct RHI_IndirectArgumentDescriptor {
    RHI_IndirectArgumentType mType;
    const char * pName;
    uint32_t mIndex;
} RHI_IndirectArgumentDescriptor;

typedef struct RHI_CommandSignatureDesc {
    RHI_RootSignatureHandle pRootSignature;
    uint32_t mIndirectArgCount;
    RHI_IndirectArgumentDescriptor * pArgDescs;
    bool mPacked;
} RHI_CommandSignatureDesc;

typedef struct RHI_DescriptorSetDesc {
    RHI_RootSignatureHandle pRootSignature;
    RHI_DescriptorUpdateFrequency mUpdateFrequency;
    uint32_t mMaxSets;
    uint32_t mNodeIndex;
} RHI_DescriptorSetDesc;

typedef struct RHI_QueueSubmitDesc {
    uint32_t mCmdCount;
    RHI_CmdHandle * ppCmds;
    RHI_FenceHandle pSignalFence;
    uint32_t mWaitSemaphoreCount;
    RHI_SemaphoreHandle * ppWaitSemaphores;
    uint32_t mSignalSemaphoreCount;
    RHI_SemaphoreHandle * ppSignalSemaphores;
    bool mSubmitDone;
} RHI_QueueSubmitDesc;

typedef struct RHI_QueuePresentDesc {
    RHI_SwapChainHandle pSwapChain;
    uint32_t mWaitSemaphoreCount;
    RHI_SemaphoreHandle * ppWaitSemaphores;
    uint8_t mIndex;
    bool mSubmitDone;
} RHI_QueuePresentDesc;



#endif // RHI_STRUCTS_H_

