///////////////////////////////////////////////////////////////////////////
//
//  Autogenerated by bindgen.py
//
///////////////////////////////////////////////////////////////////////////


#pragma once
#ifndef RHI_RESOURCELOADER_STRUCTS_H_
#define RHI_RESOURCELOADER_STRUCTS_H_


#include "enums.h"
#include "resourceloader_enums.h"
#include "structs.h"
        




typedef uint64_t RHI_SyncToken;

typedef struct RHI_MappedMemoryRange {
    uint8_t * pData;
    RHI_BufferHandle pBuffer;
    uint64_t mOffset;
    uint64_t mSize;
    uint32_t mFlags;
} RHI_MappedMemoryRange;

typedef struct RHI_BufferLoadDesc {
    RHI_BufferHandle * ppBuffer;
    const void * pData;
    RHI_BufferDesc mDesc;
    bool mForceReset;
} RHI_BufferLoadDesc;

typedef struct RHI_TextureLoadDesc {
    RHI_TextureHandle * ppTexture;
    RHI_TextureDesc * pDesc;
    const char * pFileName;
    uint32_t mNodeIndex;
    RHI_TextureCreationFlags mCreationFlag;
    RHI_TextureContainerType mContainer;
} RHI_TextureLoadDesc;

typedef struct RHI_Geometry {
    struct Hair {
        uint32_t mVertexCountPerStrand;
        uint32_t mGuideCountPerStrand;
    };
    struct ShadowData {
        void * pIndices;
        void * pAttributes[15];
    };
    RHI_BufferHandle pIndexBuffer;
    RHI_BufferHandle pVertexBuffers[15];
    uint32_t mVertexStrides[15];
    RHI_IndirectDrawIndexArguments * pDrawArgs;
    ShadowData pShadow;
    int * pInverseBindPoses;
    uint32_t * pJointRemaps;
    Hair mHair;
    uint32_t mVertexBufferCount : 8;
    uint32_t mIndexType : 2;
    uint32_t mJointCount : 16;
    uint32_t mDrawArgCount;
    uint32_t mIndexCount;
    uint32_t mVertexCount;
    uint32_t mPadA;
    uint32_t mPadB;
} RHI_Geometry;

typedef struct RHI_GeometryLoadDesc {
    RHI_Geometry ** ppGeometry;
    const char * pFileName;
    RHI_GeometryLoadFlags mFlags;
    uint32_t mNodeIndex;
    RHI_VertexLayout * pVertexLayout;
} RHI_GeometryLoadDesc;

typedef struct RHI_VirtualTexturePageInfo {
    uint32_t pageAlive;
    uint32_t TexID;
    uint32_t mipLevel;
    uint32_t padding1;
} RHI_VirtualTexturePageInfo;

typedef struct RHI_BufferUpdateDesc {
    RHI_BufferHandle pBuffer;
    uint64_t mDstOffset;
    uint64_t mSize;
    void * pMappedData;
    struct {
        RHI_MappedMemoryRange mMappedRange;
    } mInternal;
} RHI_BufferUpdateDesc;

typedef struct RHI_TextureUpdateDesc {
    RHI_TextureHandle pTexture;
    uint32_t mMipLevel;
    uint32_t mArrayLayer;
    uint8_t * pMappedData;
    uint32_t mDstRowStride;
    uint32_t mRowCount;
    uint32_t mSrcRowStride;
    uint32_t mDstSliceStride;
    uint32_t mSrcSliceStride;
    struct {
        RHI_MappedMemoryRange mMappedRange;
    } mInternal;
} RHI_TextureUpdateDesc;

typedef struct RHI_ShaderStageLoadDesc {
    const char * pFileName;
    RHI_ShaderMacro * pMacros;
    uint32_t mMacroCount;
    const char * pEntryPointName;
    RHI_ShaderStageLoadFlags mFlags;
} RHI_ShaderStageLoadDesc;

typedef struct RHI_ShaderLoadDesc {
    RHI_ShaderStageLoadDesc mStages[7];
    RHI_ShaderTarget mTarget;
} RHI_ShaderLoadDesc;

typedef struct RHI_PipelineCacheLoadDesc {
    const char * pFileName;
    RHI_PipelineCacheFlags mFlags;
} RHI_PipelineCacheLoadDesc;

typedef struct RHI_PipelineCacheSaveDesc {
    const char * pFileName;
} RHI_PipelineCacheSaveDesc;

typedef struct RHI_ResourceLoaderDesc {
    uint64_t mBufferSize;
    uint32_t mBufferCount;
} RHI_ResourceLoaderDesc;



#endif // RHI_RESOURCELOADER_STRUCTS_H_

